=========================
Executing Chapel Programs
=========================

Once you have compiled a Chapel program using the chpl compiler, you
can execute it from the command-line like any other program.  Using
the -h or --help flags will print out help for the executable.  For
example:

     ./a.out --help

This flag lists all of the standard flags that can be used with a
Chapel program, as well as a list of the configuration variables
defined by the program and their types.  If the configuration variable
has been set on the command line, its value is also shown.


-------------------------------
Setting Configuration Variables
-------------------------------

Configuration constants and variables defined in a Chapel program can
have their default values overridden on the command line using the -s
or -- flags.  Either flag takes the name of the configuration variable
followed by an equals ("=") character and the value to assign to it.
This value must be a legal Chapel literal for the type of variable.
In our current implementation, no extra spaces may appear between
these elements.  Thus, the general form is:

    ./a.out --<cfgVar>=<val>
or:
    ./a.out -s<cfgVar>=<val>


As an example, compile the hello-module.chpl example which prints a
user-definable message:

     chpl -o hello-module $CHPL_HOME/examples/hello-module.chpl

This program defines a configuration constant -- message -- indicating
the string to print to the console, set to "Hello, world!" by default.
To override the default, you can use:

     ./hello-module --message='Hello, Chapel users!'
or:
     ./hello-module -smessage='Hello, Chapel users!'


-----------------------------
Setting the Number of Locales
-----------------------------

For multi-locale Chapel executions, the number of locales on which to
execute a program is specified on the executable's command-line.  This
can be set either using the -nl flag, or by assigning to the built-in
numLocales configuration constant using the normal mechanisms.  So, to
execute on four locales, one could use:

    ./a.out -nl 4
or: ./a.out --numLocales=4
or: ./a.out -snumLocales=4

For users running with $CHPL_COMM == none (the default), only one
locale can be used.  See $CHPL_HOME/doc/README.multilocale for more
information about executing on multiple locales.

Multi-locale programs often use a launcher executable to do some
initial command-line checking before spawning the real program, stored
in a second binary named <original_binary_name>_real.  See
README.launcher for more information about the launcher executable.


------------------------------
Limiting the number of threads
------------------------------

For multithreaded Chapel executions, a built-in configuration constant
named maxThreadsPerLocale is used to control the maximum number of
threads that may be used per locale to implement the program.  See
README.tasks for more information on the role of this variable in
creating threads and executing tasks.

-------------------------------------
Controlling single locale parallelism
-------------------------------------

Data parallel operations over ranges, default domains, and default
arrays support single locale parallelism via the following built-in
configuration constants:

 --dataParTasksPerLocale      : Number of Chapel tasks to use to execute
                                forall loops (default: number of cores on
                                the CPU).
 --dataParIgnoreRunningTasks  : If true, always use dataParTasksPerLocale
                                tasks to execute forall loops.  If false,
                                reduce the number of tasks used by the
                                number of running tasks (default: true).
 --dataParMinGranularity      : The number of tasks used to execute forall
                                loops may be reduced such that the number
                                of iterations per task is never less than
                                the specified value (default: one).

The Chapel standard distributions Block and Cyclic also use
identically named constructor arguments to to control parallelism
within a locale.  The default values for these arguments are set to
their corresponding configuration constants for default data
parallelism.

------------------------
Limiting Per-Task Memory
------------------------

An active task requires space for its call stack.  This space is created
at a fixed size when the task starts executing, and remains in existence
until the task completes.  By default the size of a call stack is set to
the system stack limit, which for example on Linux-based systems is
typically 8 mb.  If the system doesn't specify a stack size limit, the
tasking layer chooses a call stack size itself.  Again for example, this
is typically 8 mb for tasking layers which use pthreads-based threading
layers.  However, this automatically selected call stack size may not be
appropriate in all cases.  For programs in which some tasks have deep
call trees it may be too small, leading to stack overflow.  For programs
which use tasks only for data parallelism it may be unnecessarily large.
The following built-in configuration constants can be used to change the
task call stack size:

 --callStackSize : Size, in bytes, of the call stack for a task.


-----------------------------------------
Controlling the amount of non-user output
-----------------------------------------

The compiler-generated executable supports "verbose" and "quiet" modes
that control the amount of Chapel-generated information printed by the
executable.

Using the --verbose flag (-v for short) will print out extra
information.  For example, it prints out the launcher commands used to
start the program (if any) and causes each locale to print out a
message when it starts executing.

Using the --quiet flag (-q for short) causes run-time warnings that
are printed by default to be suppressed.


--------------
Running in gdb
--------------

The compiler-generated executable has a --gdb flag that can be used to
launch the program within a gdb session.  For best results, make sure
that your program has been compiled using the chpl compiler's -g flag.
For GASNet, launching gdb is supported via the environment variable
CHPL_COMM_USE_GDB (See $CHPL_HOME/third-party/gasnet/README for more
information).

The utility of this feature depends greatly on your familiarity with
the Chapel generated code.  However, if your program is crashing or
running into a runtime error, you can often determine where that is
taking place by looking at a stack trace within gdb.  In addition,
scalar Chapel variables can often be inspected using "p <name>" 
(or "p _<name><TAB>" in cases where the compiler has renamed the 
variable).

Over time, we plan to improve our ability to debug the generated C
code for a Chapel program.  If you find yourself debugging the
generated code a lot and need help or have requests for better
support, please let us know so that we can prioritize accordingly.


------------------------
Flags for Tracking Tasks
------------------------

Chapel supports a few experimental capabilities for tracking the status
of tasks, primarily designed for use in a single-locale execution.
These flags add a certain amount of runtime overhead to task parallel
programs. The flags are as follows:

  -b, --blockreport : when Ctrl-C is entered during a program
                      executing under this flag, it will display a
                      list of where tasks are blocked on a
                      synchronization variable.  Running with this
                      flag will also cause the executable to
                      automatically detect deadlock for single-locale
                      executions.

  -t, --taskreport : When Ctrl-C is entered during a program executing
                     under this flag, a list of pending and executing
                     tasks will be printed to the screen, giving an
                     indication of which tasks are at which source
                     locations.
                      

-------------------------------------------
Configuration Constants for Tracking Memory
-------------------------------------------

Chapel supports a number of configuration constants related to dynamic
memory allocation for the compiler-generated executable, currently
designed for use primarily by the development team to track memory
usage in tests.  Please note that our generated code currently
contains memory leaks, so you should not be surprised if your program
requires more memory than it seems it should.

The configuration constants can be set as follows:

  --memTrack        : turns on memory tracking and enables the
                      functions memoryUsed, printMemStat, and
                      printMemTable.  This flag is implied by
                      memStats, memLeaks, and memMax.  To call these
                      functions from a Chapel program, the module
                      Memory must be explicitly used.  The
                      printMemTable function prints out a table of all
                      of the currently allocated memory.  It takes an
                      optional argument to restrict the printing to
                      allocations greater than a threshold (in bytes).
                      The printMemStat function prints out statistic
                      as explained below.  The memoryUsed function
                      returns the number of bytes that are currently
                      allocated.

  --memStats        : makes the call printMemStat() when the
                      program completes, printing out the following
                      statistics: current memory allocated (would be 0
                      if there were no leaks), maximum memory
                      allocated at the same time, total allocated
                      memory, and total freed memory.

  --memLeaks        : prints out a table of all memory that has
                      not been freed when the program completes.  It
                      is similar to printMemTable() except that the
                      entries in the table are aggregated and
                      summarized.

  --memLeaksTable   : calls printMemTable at the end of the program,
                      thus printing out a table of all memory that has
                      not been freed without aggregation.

  --memMax=uint(64) : sets a maximum level of allocatable memory.  If
                      this constraint is violated, the program is
                      terminated.  If unset or 0, there is no
                      simulated maximum.

  --memThreshold=uint(64) : sets a minimum threshold for memory
                            tracking.  Allocations and frees that are
                            smaller than this threshold are ignored.
                            The default is 0.  Note that if memory
                            tracking is off, verbose memory output may
                            include frees that are smaller than this
                            threshold.  Alternatively, if memory
                            tracking is on, the output may omit frees
                            that are larger than this threshold.  This
                            is because the size of the free is only
                            known by looking at the table of tracked
                            memory.

  --memLog=string :   specifies a file where memory reporting is
                      redirected.  It is used to redirect the output
                      generated by printMemTable, by verbose memory
                      reporting (enabled by startVerboseMem and/or
                      startVerboseMemHere), by --memStats, and by
                      --memLeaks.  If memLog is unspecified or the
                      empty string, output is directed to standard
                      out.  For multi-locale runs, a dot and the
                      locale number is appended to the name of the
                      memLog so that each locale creates its own log
                      file.

  --memLeaksLog=string : specifies a file where the output of
                         --memStats and --memLeaks is appended (after
                         the compiler and execution commands).  This
                         is useful for running multiple programs and
                         aggregating memory statistics.
