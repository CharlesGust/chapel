===================================================
Using Chapel on a Cray CX1 (TM) or Cray CX1000 (TM)
===================================================

The following information is assembled to help users get up and
running on multiple nodes of a Cray CX1 or Cray CX1000 running Linux.
If you are not familiar with Chapel, it is recommended that you first
try the instructions in the top-level README to get started with the
language.  In this case your programs will run on the login node
(which may be faster for small programs).


1) Set CHPL_HOME and MANPATH as indicated in README.chplenv.


2) Set CHPL_HOST_PLATFORM to cx-linux and CHPL_COMM to gasnet.
   For example:

     setenv CHPL_HOST_PLATFORM cx-linux
     setenv CHPL_COMM gasnet

   Advanced information about running using multiple locales and GASNet
   can be found in README.multilocale.


3) If your Cray CX1/CX1000 uses LSF for scheduling jobs between
   multiple users, you can have Chapel take care of the details for
   you by setting CHPL_LAUNCHER to lsf-gasnetrun_ibv.  For example:

     setenv CHPL_LAUNCHER lsf-gasnetrun_ibv

   If your Cray CX1/CX1000 uses PBS for scheduling jobs between
   multiple users, you can have Chapel take care of the details for
   you by setting CHPL_LAUNCHER to pbs-gasnetrun_ibv.  For example:

     setenv CHPL_LAUNCHER pbs-gasnetrun_ibv

   This will cause the generated Chapel program to submit a bsub (LSF)
   or qsub (PBS) job on your behalf and then launch your program using
   the gasnetrun_ibv launcher.

   If your Cray CX1/CX1000 does not use LSF or PBS, you do not need to
   set CHPL_LAUNCHER, in which case it will default to gasnetrun_ibv
   (a GASNet launch script for Infiniband networks).  In this case,
   you will need to set GASNET_SSH_SERVERS to list the names of the
   compute nodes on your system.  For example:

     setenv GASNET_SSH_SERVERS 'compute-0-0.local compute-0-1.local'

   Consult your system administrator for information on the above
   choices, if needed.  See README.launcher for more information
   on Chapel's launcher capabilities.


4) By default, Chapel will use gcc as the compiler for a Cray
   CX1/CX1000.  If you want to override this choice, you can select
   another compiler using the CHPL_HOST_COMPILER variable.  See
   README.chplenv for options.


5) Make sure you're in the top-level chapel/ directory:

     cd $CHPL_HOME

   Make/re-make the compiler and runtime:

     gmake


6) Set your PATH to include the directory $CHPL_HOME/bin/cx-linux
   which is created when you build the compiler.  For example:

     setenv PATH "$PATH":"$CHPL_HOME/bin/cx-linux"


7) Compile your Chapel program as usual.  See README.compiling for
   details.  For example:

     chpl -o hello6-taskpar-dist $CHPL_HOME/examples/hello6-taskpar-dist.chpl


8) The above settings result in multi-locale compilations.  When you
   compile a Chapel program, you should see two binaries (e.g.,
   hello6-taskpar-dist and hello6-taskpar-dist_real).  The first
   binary contains code to launch the Chapel program onto the compute
   nodes, as specified by your CHPL_LAUNCHER setting.  The second
   contains the program code itself; it is not intended to be executed
   directly from the shell prompt.


9) Multi-locale binaries require the number of locales to be specified
   on the command line.  Other than this, execute your Chapel program
   as usual.  For example:

     ./hello6-taskpar-dist -nl 2

   You can use the -v flag to see the commands used to launch your
   program.  Under LSF, one compute node will be requested per locale;
   you will need to have enough nodes available on the machine.
   See README.launcher for further details.

