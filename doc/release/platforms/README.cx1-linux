===============================
Using Chapel on a Cray CX1 (TM)
===============================

The following information is assembled to help users get up and
running on multiple nodes of a Cray CX1 running Linux.  If you are not
familiar with Chapel, it is recommended that you first try the
instructions in the top-level README to get started with the language.


1) Set CHPL_HOME and MANPATH as usual.  See README.chplenv for
   details.


2) Set CHPL_HOST_PLATFORM to cx1-linux and CHPL_COMM to gasnet.  For
   example:

     setenv CHPL_HOST_PLATFORM cx1-linux
     setenv CHPL_COMM gasnet

   See README.multilocale for further information about running using
   multiple locales and GASNet.


3) If your Cray CX1 uses PBS for scheduling jobs between multiple
   users, you can have Chapel take care of the details for you by
   setting CHPL_LAUNCHER to pbs-gasnetrun_ibv.  For example:

     setenv CHPL_LAUNCHER pbs-gasnetrun_ibv

   This will cause the generated Chapel program to submit a qsub job
   on your behalf and then launch your program using the gasnetrun_ibv
   launcher.

   If your Cray CX1 does not use PBS, you do not need to set
   CHPL_LAUNCHER, in which case it will default to gasnetrun_ibv (a
   GASNet launch script for Infiniband networks.  In this case, you
   will need to set GASNET_SSH_SERVERS to list the names of the
   compute nodes on your system.  For example:

     setenv GASNET_SSH_SERVERS 'compute-0-0.local compute-0-1.local'

   See README.launcher for more information on Chapel's launcher
   capabilities.


4) By default, Chapel will use gcc as the compiler for a Cray CX1.  If
   you want to override this choice, you can select another compiler
   using the CHPL_HOST_COMPILER variable.  See README.chplenv for
   options.


5) Make sure you're in the top-level chapel/ directory:

     cd $CHPL_HOME


6) Make/re-make the compiler and runtime:

     gmake


7) Compile your Chapel program as usual.  See README.compiling for
   details.  For example:

     chpl -o hello-multiloc $CHPL_HOME/examples/hello-multiloc.chpl


8) When you compile a Chapel program using the settings above, you
   should see two binaries (e.g., hello-multiloc and
   hello-multiloc_real).  The first binary contains code to launch the
   Chapel program onto the compute nodes, as specified by your
   CHPL_LAUNCHER setting.  The second contains the program code
   itself.


9) Multi-locale executions require the number of locales to be
   specified on the command line.  Other than this, execute your
   Chapel program as usual.  For example:

     ./hello-multiloc -nl 2

   You can use the -v flag to see the commands used to launch your
   program.  See README.launcher for further details.

