===============================
Using Chapel on a Cray XMT (TM)
===============================

The following information is assembled to help users get up and
running on a Cray XMT.  If you are not familiar with Chapel, it is
recommended that you first try the instructions in the top-level
README to get started with the language.

It should be noted that support for Chapel on Cray XMT systems is very
preliminary, and performance may be unacceptable for certain language
constructs.  In particular, the implementation of Chapel's data
parallel constructs (e.g., domain and array operations) has not yet
been optimized to leverage the native compiler.  On the other hand, we
believe the task parallel constructs will perform more reasonably, as
these constructs map directly to native constructs in Cray XMT C/C++.

1) Set CHPL_HOME and MANPATH as usual.  See README.chplenv for
   details.

2) Set CHPL_TARGET_PLATFORM to xmt.  Notice that we are
   cross-compiling, because the login node for a Cray XMT system is a
   linux64 system (this is inferred and does not need to be explicitly
   set).

3) Ensure that you have the following modules loaded:

     - mta-pe
     - xmt-tools

4) Make sure you're in the top-level chapel/ directory:

     cd $CHPL_HOME

5) Make/re-make the compiler and runtime:

     gmake

6) Compile your Chapel program as usual.  See README.compiling for
   details.  For example:

     chpl -o hello $CHPL_HOME/examples/hello.chpl

7) When you compile a Chapel program for the Cray XMT, you should see
   two binaries (e.g., hello and hello_real).  The first binary
   contains code to launch the Chapel program onto the compute nodes.
   The second contains the program code itself.

8) The Cray XMT is treated as a single locale (shared memory) machine.
   Chapel programs are executed as usual:

     ./hello

   You can use the -v flag to see the commands used to launch your
   program.  See README.launcher for further details.

   Chapel programs running on the Cray XMT may be executed using the
   following additional flags:

     --numInitialTeams <n>: Specifies the number of teams required to
       start the program

     --maxTeams <n>: Specifies the maximum number of teams the program
       should ever use

     --numNodes <n>: Equivalent to '--numInitialTeams <n> --maxTeams <n>'


