=====================
Chapel volatile types
=====================

As of release 1.3.0, the Chapel compiler has had support for volatile
types.  This is a feature that we expect to promote to the language
specification, but it has not made that leap yet.  Chapel's volatile
types are similar to C's: they imply that any reads of the variable
must go to memory -- that the compiler may not cache the value from
one read to use in subsequent reads (as permitted by the memory
consistency model).

Currently supported volatile types are:

- volatile bool/bool(*)
- volatile int/int(*)
- volatile uint/uint(*)
- volatile real/real(*)
- volatile imag/imag(*)

Where for each type * can be any of the normal legal values of that
type.

In the future we anticipate adding support for volatile classes
(references) and possibly for volatile complex variables.  Please let
us know if these (or other combinations) would be useful to you in the
near-term at chapel_info@cray.com.
