NAME
  chpl - Cray Inc. compiler for the Chapel parallel language
SYNOPSIS
  chpl [-O] [--no-checks] [--fast]
       [-g] [--savec dir]
       [-M dir...] [--main-module mod]
       [-o outfile] [flags...] source-files...
DESCRIPTION
  The Chapel compiler, chpl, converts one or more Chapel source files
  into an executable. It does this by compiling Chapel to ISO C code
  and then invoking the target platform's C compiler to create the
  executable.  However, most users will not need to be aware of the
  use of C as an intermediate format during compilation.

  The current implementation of chpl supports the creation of multiple
  threads on multiple locales. It uses POSIX threads (pthreads) to
  implement user-level tasks on each locale and GASNet to implement
  communication and coordination between locales.

  This version of chpl focuses primarily on demonstrating Chapel
  language features in order to support experimentation with the
  language and generate user feedback. The performance and memory
  utilization of the generated code are known to be suboptimal and
  should not be considered representative of Chapel's potential.
  Future versions of the compiler will continue to result in improved
  performance.

OPTIONS

  Compiler Information Options

  --copyright     Print the compiler's copyright information.

  -h, --help      Print a list of the command line options, indicating
                  the arguments that they expect and a brief summary of their 
                  purpose.

  --help-env      Print the command line option help message, listing
                  the environment variable equivalent for each flag
                  and its current value.

  --help-settings   Print the command line option help message, listing
                 the current setting of each option as specified by
                 environment variables and other flags on the command line.

  --license       Print the compiler's license information.

  --version       Print the version number of the compiler.

  Module Processing Options

  -M, --module-dir <dir>   Add the specified directory to the search path used
                    to find Chapel source files to fulfill module use 
                    statements.

  --main-module <module>   For programs that supply multiple possible entry
                     points (main() functions or module initializers that
                     can serve as an entry point), this option can be used 
                     to specify which module should serve as the starting 
                     point for program execution.

  --print-search-dirs   Print the module search path used to resolve module
                    use statements. This is the list of directories
                    named by Chapel source files on the command line followed
                    by those specified with the -M option followed by those
                    specified by the $CHPL_MODULE_PATH environment variable.

  --print-module-files   Prints the Chapel module source files parsed by
                    the Chapel compiler.

  --count-tokens    Prints the total number of static lexical tokens in 
                    the Chapel code files named on the command line.

  --print-code-size    Prints out the size of the Chapel code files named
                    on the command line in great detail: For each code file, 
                    first the code is echoed back to the screen, prefixing 
                    each line with the number of lexical tokens it contains, 
                    or *C* if the line only contains comments, or *B* if the
                    line is blank. Next, the total number of tokens for the
                    file is printed. Then the number of lines is 
                    displayed, broken down into code lines, comment-only 
                    lines, and blank lines. Then the maximum and average 
                    number of tokens per line is displayed. Finally, a 
                    histogram of the number of tokens per line is shown.
                    After this information is printed for each file, a
                    grand total of the number of tokens across all the
                    files is displayed.

  Parallelism Control Options

  --[no-]local      Compile code for single/[multi-] locale execution,
                    changing on blocks to normal blocks, evaluating the
                    locale expression for side effects, and optimizing
                    away all remote references in the code. When $CHPL_COMM
                    is set to "none", --local is the default; otherwise
                    --no-local is the default.

  --[no-]serial     Compile code for single/[multi-] threaded execution,
                    changing forall- and coforall-loops into for loops;
                    changing begin, cobegin, and atomic blocks into regular
                    block statements; and removing the serial keyword,
                    evaluating its expression only for side effects.
                    When $CHPL_THREADS is set to "none" --serial is the
                    default; otherwise --no-serial is the default.

  --[no-]serial-forall   Compile forall-loops for single/[multi-] threaded
                    execution. If set, forall-loops are treated like
                    for-loops.

  Optimization Control Options

  --baseline        Turns off all optimizations in the Chapel compiler and
                    generates naive C code with many temporaries.

  --conditional-dynamic-dispatch-limit   When greater than zero, this
                    limit controls when the compiler will generate
                    code to handle dynamic dispatch with conditional
                    statements. If the number of possible method
                    calls is less than or equal to this limit, a
                    (possibly nested) conditional statement will be
                    used for dynamic dispatch instead of the virtual
                    method table. The default is zero.

  --fast            Turns off all runtime checks using --no-checks, turns
                    on --no-ieee-float, and enables all other compiler
                    optimizations (via -O) in the rest of this section.
 
  --[no-]ieee-float   Disable [enable] optimizations that may affect IEEE
                    floating point conformance. The default is --ieee-float,
                    which ensures IEEE conformance.

  --[no-]copy-propagation   Enable [disable] copy propagation.

  --[no-]dead-code-elimination   Enable [disable] dead code elimination.

  --[no-]fast-followers   Enable [disable] the fast follower
                    optimization in which fast implementations of
                    followers will be invoked for specific leaders.

  --[no-]inline     Enable [disable] function inlining.

  --[no-]inline-iterators   Enable [disable] iterator inlining. When
                    possible, the compiler optimizes the invocation of an
                    iterator in a loop header by inlining the
                    iterator's definition around the loop body.

  --[no-]live-analysis   Enable [disable] live variable analysis, which is
                    currently only used to optimize iterators that are
                    not inlined.

  --[no-]optimize-loop-iterators   Enable [disable] optimizations to
                    aggressively optimize iterators that are defined in terms
                    of a single loop. By default this is enabled.

  --[no-]optimize-on-clauses   Enable [disable] optimization of on
                               clauses in which qualifying on
                               statements may be optimized in the
                               runtime if supported by the $CHPL_COMM
                               layer.

  --optimize-on-clause-limit   Limit on the function call depth to allow
                    for on clause optimization. The default value is 20.

  --[no-]privatization   Enable [disable] privatization of distributed arrays
                    and domains if the distribution supports it.

  --[no-]remote-value-forwarding   Enable [disable] remote value
                    forwarding of read-only values to remote threads
                    if reading them early does not violate program
                    semantics.

  --[no-]remove-copy-calls   Enable [disable] removal of copy calls
                    (including calls to what amounts to a copy
                    constructor for records) that ensure Chapel
                    semantics but which can often be optimized away.

  --[no-]scalar-replacement   Enable [disable] scalar replacement of records
                    and classes for some compiler-generated data structures
                    that support language features such as tuples and
                    iterators.

  --scalar-replace-limit   Limit on the size of tuples being replaced during
                           scalar replacement. The default value is 8.

  --[no-]tuple-copy-opt   Enable [disable] the tuple copy optimization
                          in which whole tuple copies of homogenous
                          tuples are replaced with explicit assignment
                          of each tuple component.

  --tuple-copy-limit  Limit on the size of tuples considered for the
                      tuple copy optimization. The default value is 8.


  Run-time Semantic Check Options

  --no-checks       Turns on --no-bounds-checks, --no-nil-checks and
                    --no-local-checks. Currently, it is typically necessary to
                    use this flag in order to have any hope of
                    achieving performance competitive with hand-coded
                    C or Fortran.

  --[no-]bounds-checks   Enable [disable] dynamic bounds checking within the
                    generated Chapel program.

  --[no-]local-checks  Enable [disable] dynamic checking of the locality of
                    references within local blocks.

  --[no-]nil-checks   Enable [disable] dynamic checking for accessing nil
                    object references.

  C Code Generation Options

  --[no-]cpp-lines   Causes the compiler to emit cpp #line directives
                    into the generated code in order to help map generated
                    C code back to the Chapel source code that it implements.
                    The [no-] version of this flag turns this feature off.

  --savec <dir>    Saves the compiler-generated C code in the specified 
                    directory, creating the directory if it does not already
                    exist.

  C Code Compilation Options

  --ccflags <flags>   Add the specified flags to the C compiler command line
                     when compiling the generated code.

  --ldflags <flags>  Add the specified flags to the C compiler link line
                     when linking the generated code.

  -l, --lib-linkage <library>   Specify a C library to link in on the C 
                     compiler command line.

  -I, --hdr-search-path <dir>   Add dir to the back-end C compiler's search 
                     path for header files.

  -L, --lib-search-path <dir>   Specify a C library search path on the C
                     compiler command line.

  --make <make utility>   Specify the gmake-compatible utility that should be 
                    used when compiling the generated code.

  -g, --[no-]debug  Causes the generated C code to be compiled with debugging
                    turned on. If you are trying to debug a Chapel program,
                    this flag is virtually essential along with the --savec
                    flag. This flag also turns on the --cpp-lines option
                    unless compiling as a developer (for example, via --devel).

  -O, --[no-]optimize  Causes the generated C code to be compiled with
                    [without] optimizations turned on. The specific set of
                    flags used by this option is platform-dependent; use the
                    --print-commands option to view the C compiler command
                    used. If you would like additional flags to be used with
                    the C compiler command, use the --ccflags option.

  -o, --output <filename>   Specify the name of the compiler-generated
                     executable (defaults to a.out if unspecified).

  Compilation Trace Options

  --print-commands  Prints the system commands that the compiler 
                    executes in order to compile the Chapel program.

  --print-passes    Prints the compiler passes during compilation and the
                    amount of wall clock time required for the pass.

  Miscellaneous Options

  --[no-]devel       Puts the compiler into [out of] developer mode, which
                     takes off some of the safety belts, changes default
                     behaviors, and exposes additional undocumented
                     command-line options. Use at your own risk and direct any
                     questions to the Chapel team.

  --explain-call <call>[:<module>][:<line>]   Helps explain the function
                     resolution process for the named function by printing 
                     out the visible and candidate functions. Specifying 
                     a module name and/or line number can focus the
                     explanation to those calls within a specific module
                     or at a particular line number.

  --explain-instantiation <function|type>[:<module>][:<line>]   Lists
                     all of the instantiations of a function or type.
                     The location of one of possibly many points of
                     instantiation is shown. Specifying a module name
                     and/or line number can focus the explanation to
                     those calls within a specific module or at a
                     particular line number.

  --instantiate-max <max>   In order to avoid infinite loops when
                     instantiating generic functions, the compiler
                     limits the number of times a single function
                     can be instantiated. This flag raises that
                     maximum in the event that a legal instantiation
                     is being pruned too aggressively.

  --no-warnings      Turns off compiler warnings.

  -s, --set <config param>[=<value>]   Overrides the default value of
                     a configuration parameter in the code. For
                     boolean configuration variables, the value can
                     be omitted, causing the default value to be toggled.

ENVIRONMENT
  See $CHPL_HOME/doc/README.chplenv for detailed information about 
  general environment variable settings, legal values, and default
  settings. Run $CHPL_HOME/util/printchplenv to view your current
  settings (as explicitly set and inferred). Some of the most
  commonly-used environment variables are summarized here.

  CHPL_HOME           Specifies the location of the Chapel installation directory

  CHPL_MODULE_PATH    Specifies a search path for Chapel source files that
                      satisfy module use statements as a colon-separated
                      list of directories

  CHPL_HOST_PLATFORM  Specifies the platform on which the Chapel compiler is
                      running (defaults to our best guess)

  CHPL_TARGET_PLATFORM   Specifies the platform on which the target executable
                         is to be run for the purposes of cross-compiling
                         (defaults to $CHPL_HOST_PLATFORM)

  CHPL_HOST_COMPILER  Specifies the compiler suite that should be used
                      to build the Chapel compiler (defaults to a best
                      guess based on $CHPL_HOST_PLATFORM)

  CHPL_TARGET_COMPILER  Specifies the compiler suite that should be used
                      to build the generated C code for a Chapel program
                      and the Chapel runtime (defaults to a best guess 
                      based on $CHPL_HOST_PLATFORM, $CHPL_TARGET_PLATFORM,
                      and $CHPL_HOST_COMPILER)

  CHPL_TASKS          Specified the tasking layer to use for implementing
                      tasks (defaults to a best guess based on
                      $CHPL_TARGET_PLATFORM)

  CHPL_COMM           Specifies the communication layer to use for
                      inter-locale data transfers (defaults to 'none')

  CHPL_LAUNCHER       Specifies the launcher, if any, used to start job
                      execution (defaults to a best guess based on
                      $CHPL_COMM and $CHPL_TARGET_PLATFORM)

  Most compiler command-line options have an environment variable that can
  be used to specify a default value. Use the --help-env option to list the 
  environment variable equivalent for each option. Command-line options 
  will always override environment variable settings in the event of a 
  conflict.

BUGS
  See $CHPL_HOME/STATUS for a list of known bugs and $CHPL_HOME/doc/README.bugs
  for instructions on reporting bugs.
SEE ALSO
  $CHPL_HOME/README for more information on how to get started with Chapel.
AUTHORS
  See $CHPL_HOME/CONTRIBUTORS for a list of contributors to Chapel.
COPYRIGHT
  Copyright (c) 2004-2010 Cray Inc. (See $CHPL_HOME/LICENSE for more
  details)
