====================
Chapel Example Codes
====================

This directory contains a few simple "Hello, world!" example codes to
get started with Chapel program structure:

     hello.chpl             : the simplest Chapel "Hello, world!" program
     hello-module.chpl      : a version using a more structured form of Chapel
     hello-multicore.chpl   : a multi-tasking "Hello, world!" program 
     hello-multiloc.chpl    : a multi-locale "Hello, world!" program

It also contains subdirectories that contain more interesting
examples:

     primers/               : introduce Chapel concepts using a narrative flow
     programs/              : demonstrate Chapel using small programs
     hpcc/                  : implementations of the HPC Challenge benchmarks

See the READMEs in each subdirectory for a description of its
examples.

If you are interested in finding examples that use a specific Chapel
feature, refer to README.features, which contains a map of which tests
demonstrate which language features.


------------------
Building the tests
------------------

Most of the examples can be compiled without referring to any
additional source files.  For example, the canonical "Hello, world!"
program can be compiled as follows:

     chpl -o hello hello.chpl

The hpcc benchmarks each use multiple source files -- see hpcc/README
for details.

We provide Makefiles in each directory that can be used to build a
single test in that directory by name:

     gmake hello

Alternatively, you can build all the tests in a directory and its
subdirectories:

     gmake all


-----------
Other files
-----------

./
  Makefile        : Makefile for compiling the examples
  README.features : maps out which tests use which Chapel features
  README.testing  : provides an introduction to using the Chapel testing system
  start_test      : the main script for the Chapel testing system
  Bin/            : contains helper scripts for the testing system
  Logs/           : directory created by the test system to store logs
  *.compopts      : used by the Chapel testing system -- see README.testing
  *.execopts      : "
  *.good          : "
  *.notest        : "
  *.numlocales    : "
  *.skipif        : "
  *.perfkeys      : "
  *.timeout       : "
