This is ../../doc/starpu.info, produced by makeinfo version 4.13 from
../../doc/starpu.texi.

Copyright (C) 2009-2011  Universite' de Bordeaux 1

Copyright (C) 2010, 2011, 2012  Centre National de la Recherche
Scientifique

Copyright (C) 2011, 2012 Institut National de Recherche en Informatique
et Automatique

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* StarPU: (starpu).             StarPU Handbook
END-INFO-DIR-ENTRY


File: starpu.info,  Node: Advanced configuration,  Prev: Configuring workers,  Up: Compilation configuration

15.1.3 Advanced configuration
-----------------------------

`--enable-perf-debug'
     Enable performance debugging through gprof.

`--enable-model-debug'
     Enable performance model debugging.

`--enable-stats'
     Enable gathering of memory transfer statistics.

`--enable-maxbuffers'
     Define the maximum number of buffers that tasks will be able to
     take as parameters, then available as the `STARPU_NMAXBUFS' macro.

`--enable-allocation-cache'
     Enable the use of a data allocation cache to avoid the cost of it
     with CUDA. Still experimental.

`--enable-opengl-render'
     Enable the use of OpenGL for the rendering of some examples.

`--enable-blas-lib'
     Specify the blas library to be used by some of the examples. The
     library has to be 'atlas' or 'goto'.

`--disable-starpufft'
     Disable the build of libstarpufft, even if fftw or cuFFT is
     available.

`--with-magma=PREFIX'
     Search for MAGMA under PREFIX.  PREFIX should notably contain
     `include/magmablas.h'.

`--with-fxt=PREFIX'
     Search for FxT under PREFIX.  FxT
     (http://savannah.nongnu.org/projects/fkt) is used to generate
     traces of scheduling events, which can then be rendered them using
     ViTE (*note off-line performance feedback: Off-line.).  PREFIX
     should notably contain `include/fxt/fxt.h'.

`--with-perf-model-dir=DIR'
     Store performance models under DIR, instead of the current user's
     home.

`--with-mpicc=PATH'
     Use the `mpicc' compiler at PATH, for starpumpi (*note StarPU MPI
     support::).

`--with-goto-dir=PREFIX'
     Search for GotoBLAS under PREFIX.

`--with-atlas-dir=PREFIX'
     Search for ATLAS under PREFIX, which should notably contain
     `include/cblas.h'.

`--with-mkl-cflags=CFLAGS'
     Use CFLAGS to compile code that uses the MKL library.

`--with-mkl-ldflags=LDFLAGS'
     Use LDFLAGS when linking code that uses the MKL library.  Note
     that the MKL website
     (http://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/)
     provides a script to determine the linking flags.

`--disable-gcc-extensions'
     Disable the GCC plug-in (*note C Extensions::).  By default, it is
     enabled when the GCC compiler provides a plug-in support.

`--disable-socl'
     Disable the SOCL extension (*note SOCL OpenCL Extensions::).  By
     default, it is enabled when an OpenCL implementation is found.

`--disable-starpu-top'
     Disable the StarPU-Top interface (*note starpu-top::).  By
     default, it is enabled when the required dependencies are found.



File: starpu.info,  Node: Execution configuration through environment variables,  Prev: Compilation configuration,  Up: Configuring StarPU

15.2 Execution configuration through environment variables
==========================================================

* Menu:

* Workers::                     Configuring workers
* Scheduling::                  Configuring the Scheduling engine
* Misc::                        Miscellaneous and debug

   Note: the values given in `starpu_conf' structure passed when
calling `starpu_init' will override the values of the environment
variables.


File: starpu.info,  Node: Workers,  Next: Scheduling,  Up: Execution configuration through environment variables

15.2.1 Configuring workers
--------------------------

* Menu:

* STARPU_NCPUS::                Number of CPU workers
* STARPU_NCUDA::                Number of CUDA workers
* STARPU_NOPENCL::              Number of OpenCL workers
* STARPU_NGORDON::              Number of SPU workers (Cell)
* STARPU_WORKERS_NOBIND::       Do not bind workers
* STARPU_WORKERS_CPUID::        Bind workers to specific CPUs
* STARPU_WORKERS_CUDAID::       Select specific CUDA devices
* STARPU_WORKERS_OPENCLID::     Select specific OpenCL devices


File: starpu.info,  Node: STARPU_NCPUS,  Next: STARPU_NCUDA,  Up: Workers

15.2.1.1 `STARPU_NCPUS' - Number of CPU workers
...............................................

Specify the number of CPU workers (thus not including workers dedicated
to control acceleratores). Note that by default, StarPU will not
allocate more CPU workers than there are physical CPUs, and that some
CPUs are used to control the accelerators.


File: starpu.info,  Node: STARPU_NCUDA,  Next: STARPU_NOPENCL,  Prev: STARPU_NCPUS,  Up: Workers

15.2.1.2 `STARPU_NCUDA' - Number of CUDA workers
................................................

Specify the number of CUDA devices that StarPU can use. If
`STARPU_NCUDA' is lower than the number of physical devices, it is
possible to select which CUDA devices should be used by the means of the
`STARPU_WORKERS_CUDAID' environment variable. By default, StarPU will
create as many CUDA workers as there are CUDA devices.


File: starpu.info,  Node: STARPU_NOPENCL,  Next: STARPU_NGORDON,  Prev: STARPU_NCUDA,  Up: Workers

15.2.1.3 `STARPU_NOPENCL' - Number of OpenCL workers
....................................................

OpenCL equivalent of the `STARPU_NCUDA' environment variable.


File: starpu.info,  Node: STARPU_NGORDON,  Next: STARPU_WORKERS_NOBIND,  Prev: STARPU_NOPENCL,  Up: Workers

15.2.1.4 `STARPU_NGORDON' - Number of SPU workers (Cell)
........................................................

Specify the number of SPUs that StarPU can use.


File: starpu.info,  Node: STARPU_WORKERS_NOBIND,  Next: STARPU_WORKERS_CPUID,  Prev: STARPU_NGORDON,  Up: Workers

15.2.1.5 `STARPU_WORKERS_NOBIND' - Do not bind workers to specific CPUs
.......................................................................

Setting it to non-zero will prevent StarPU from binding its threads to
CPUs. This is for instance useful when running the testsuite in
parallel.


File: starpu.info,  Node: STARPU_WORKERS_CPUID,  Next: STARPU_WORKERS_CUDAID,  Prev: STARPU_WORKERS_NOBIND,  Up: Workers

15.2.1.6 `STARPU_WORKERS_CPUID' - Bind workers to specific CPUs
...............................................................

Passing an array of integers (starting from 0) in `STARPU_WORKERS_CPUID'
specifies on which logical CPU the different workers should be bound.
For instance, if `STARPU_WORKERS_CPUID = "0 1 4 5"', the first worker
will be bound to logical CPU #0, the second CPU worker will be bound to
logical CPU #1 and so on.  Note that the logical ordering of the CPUs
is either determined by the OS, or provided by the `hwloc' library in
case it is available.

   Note that the first workers correspond to the CUDA workers, then
come the OpenCL and the SPU, and finally the CPU workers. For example if
we have `STARPU_NCUDA=1', `STARPU_NOPENCL=1', `STARPU_NCPUS=2' and
`STARPU_WORKERS_CPUID = "0 2 1 3"', the CUDA device will be controlled
by logical CPU #0, the OpenCL device will be controlled by logical CPU
#2, and the logical CPUs #1 and #3 will be used by the CPU workers.

   If the number of workers is larger than the array given in
`STARPU_WORKERS_CPUID', the workers are bound to the logical CPUs in a
round-robin fashion: if `STARPU_WORKERS_CPUID = "0 1"', the first and
the third (resp. second and fourth) workers will be put on CPU #0
(resp. CPU #1).

   This variable is ignored if the `use_explicit_workers_bindid' flag
of the `starpu_conf' structure passed to `starpu_init' is set.


File: starpu.info,  Node: STARPU_WORKERS_CUDAID,  Next: STARPU_WORKERS_OPENCLID,  Prev: STARPU_WORKERS_CPUID,  Up: Workers

15.2.1.7 `STARPU_WORKERS_CUDAID' - Select specific CUDA devices
...............................................................

Similarly to the `STARPU_WORKERS_CPUID' environment variable, it is
possible to select which CUDA devices should be used by StarPU. On a
machine equipped with 4 GPUs, setting `STARPU_WORKERS_CUDAID = "1 3"'
and `STARPU_NCUDA=2' specifies that 2 CUDA workers should be created,
and that they should use CUDA devices #1 and #3 (the logical ordering
of the devices is the one reported by CUDA).

   This variable is ignored if the `use_explicit_workers_cuda_gpuid'
flag of the `starpu_conf' structure passed to `starpu_init' is set.


File: starpu.info,  Node: STARPU_WORKERS_OPENCLID,  Prev: STARPU_WORKERS_CUDAID,  Up: Workers

15.2.1.8 `STARPU_WORKERS_OPENCLID' - Select specific OpenCL devices
...................................................................

OpenCL equivalent of the `STARPU_WORKERS_CUDAID' environment variable.

   This variable is ignored if the `use_explicit_workers_opencl_gpuid'
flag of the `starpu_conf' structure passed to `starpu_init' is set.


File: starpu.info,  Node: Scheduling,  Next: Misc,  Prev: Workers,  Up: Execution configuration through environment variables

15.2.2 Configuring the Scheduling engine
----------------------------------------

* Menu:

* STARPU_SCHED::                Scheduling policy
* STARPU_CALIBRATE::            Calibrate performance models
* STARPU_PREFETCH::             Use data prefetch
* STARPU_SCHED_ALPHA::          Computation factor
* STARPU_SCHED_BETA::           Communication factor


File: starpu.info,  Node: STARPU_SCHED,  Next: STARPU_CALIBRATE,  Up: Scheduling

15.2.2.1 `STARPU_SCHED' - Scheduling policy
...........................................

Choose between the different scheduling policies proposed by StarPU:
work random, stealing, greedy, with performance models, etc.

   Use `STARPU_SCHED=help' to get the list of available schedulers.


File: starpu.info,  Node: STARPU_CALIBRATE,  Next: STARPU_PREFETCH,  Prev: STARPU_SCHED,  Up: Scheduling

15.2.2.2 `STARPU_CALIBRATE' - Calibrate performance models
..........................................................

If this variable is set to 1, the performance models are calibrated
during the execution. If it is set to 2, the previous values are
dropped to restart calibration from scratch. Setting this variable to 0
disable calibration, this is the default behaviour.

   Note: this currently only applies to `dm', `dmda' and `heft'
scheduling policies.


File: starpu.info,  Node: STARPU_PREFETCH,  Next: STARPU_SCHED_ALPHA,  Prev: STARPU_CALIBRATE,  Up: Scheduling

15.2.2.3 `STARPU_PREFETCH' - Use data prefetch
..............................................

This variable indicates whether data prefetching should be enabled (0
means that it is disabled). If prefetching is enabled, when a task is
scheduled to be executed e.g. on a GPU, StarPU will request an
asynchronous transfer in advance, so that data is already present on
the GPU when the task starts. As a result, computation and data
transfers are overlapped.  Note that prefetching is enabled by default
in StarPU.


File: starpu.info,  Node: STARPU_SCHED_ALPHA,  Next: STARPU_SCHED_BETA,  Prev: STARPU_PREFETCH,  Up: Scheduling

15.2.2.4 `STARPU_SCHED_ALPHA' - Computation factor
..................................................

To estimate the cost of a task StarPU takes into account the estimated
computation time (obtained thanks to performance models). The alpha
factor is the coefficient to be applied to it before adding it to the
communication part.


File: starpu.info,  Node: STARPU_SCHED_BETA,  Prev: STARPU_SCHED_ALPHA,  Up: Scheduling

15.2.2.5 `STARPU_SCHED_BETA' - Communication factor
...................................................

To estimate the cost of a task StarPU takes into account the estimated
data transfer time (obtained thanks to performance models). The beta
factor is the coefficient to be applied to it before adding it to the
computation part.


File: starpu.info,  Node: Misc,  Prev: Scheduling,  Up: Execution configuration through environment variables

15.2.3 Miscellaneous and debug
------------------------------

* Menu:

* STARPU_SILENT::               Disable verbose mode
* STARPU_LOGFILENAME::          Select debug file name
* STARPU_FXT_PREFIX::           FxT trace location
* STARPU_LIMIT_GPU_MEM::        Restrict memory size on the GPUs
* STARPU_GENERATE_TRACE::       Generate a Paje trace when StarPU is shut down


File: starpu.info,  Node: STARPU_SILENT,  Next: STARPU_LOGFILENAME,  Up: Misc

15.2.3.1 `STARPU_SILENT' - Disable verbose mode
...............................................

This variable allows to disable verbose mode at runtime when StarPU has
been configured with the option `--enable-verbose'.


File: starpu.info,  Node: STARPU_LOGFILENAME,  Next: STARPU_FXT_PREFIX,  Prev: STARPU_SILENT,  Up: Misc

15.2.3.2 `STARPU_LOGFILENAME' - Select debug file name
......................................................

This variable specifies in which file the debugging output should be
saved to.


File: starpu.info,  Node: STARPU_FXT_PREFIX,  Next: STARPU_LIMIT_GPU_MEM,  Prev: STARPU_LOGFILENAME,  Up: Misc

15.2.3.3 `STARPU_FXT_PREFIX' - FxT trace location
.................................................

This variable specifies in which directory to save the trace generated
if FxT is enabled. It needs to have a trailing '/' character.


File: starpu.info,  Node: STARPU_LIMIT_GPU_MEM,  Next: STARPU_GENERATE_TRACE,  Prev: STARPU_FXT_PREFIX,  Up: Misc

15.2.3.4 `STARPU_LIMIT_GPU_MEM' - Restrict memory size on the GPUs
..................................................................

This variable specifies the maximum number of megabytes that should be
available to the application on each GPUs. In case this value is
smaller than the size of the memory of a GPU, StarPU pre-allocates a
buffer to waste memory on the device. This variable is intended to be
used for experimental purposes as it emulates devices that have a
limited amount of memory.


File: starpu.info,  Node: STARPU_GENERATE_TRACE,  Prev: STARPU_LIMIT_GPU_MEM,  Up: Misc

15.2.3.5 `STARPU_GENERATE_TRACE' - Generate a Paje trace when StarPU is shut down
.................................................................................

When set to 1, this variable indicates that StarPU should automatically
generate a Paje trace when starpu_shutdown is called.


File: starpu.info,  Node: Full source code for the 'Scaling a Vector' example,  Next: GNU Free Documentation License,  Prev: Configuring StarPU,  Up: Top

Annexe A Full source code for the 'Scaling a Vector' example
************************************************************

* Menu:

* Main application::
* CPU Kernel::
* CUDA Kernel::
* OpenCL Kernel::


File: starpu.info,  Node: Main application,  Next: CPU Kernel,  Up: Full source code for the 'Scaling a Vector' example

A.1 Main application
====================

     /*
      * This example demonstrates how to use StarPU to scale an array by a factor.
      * It shows how to manipulate data with StarPU's data management library.
      *  1- how to declare a piece of data to StarPU (starpu_vector_data_register)
      *  2- how to describe which data are accessed by a task (task->handles[0])
      *  3- how a kernel can manipulate the data (buffers[0].vector.ptr)
      */
     #include <starpu.h>
     #include <starpu_opencl.h>

     #define    NX    2048

     extern void scal_cpu_func(void *buffers[], void *_args);
     extern void scal_sse_func(void *buffers[], void *_args);
     extern void scal_cuda_func(void *buffers[], void *_args);
     extern void scal_opencl_func(void *buffers[], void *_args);

     static struct starpu_codelet cl = {
         .where = STARPU_CPU | STARPU_CUDA | STARPU_OPENCL,
         /* CPU implementation of the codelet */
         .cpu_funcs = { scal_cpu_func, scal_sse_func, NULL },
     #ifdef STARPU_USE_CUDA
         /* CUDA implementation of the codelet */
         .cuda_funcs = { scal_cuda_func, NULL },
     #endif
     #ifdef STARPU_USE_OPENCL
         /* OpenCL implementation of the codelet */
         .opencl_funcs = { scal_opencl_func, NULL },
     #endif
         .nbuffers = 1,
         .modes = { STARPU_RW }
     };

     #ifdef STARPU_USE_OPENCL
     struct starpu_opencl_program programs;
     #endif

     int main(int argc, char **argv)
     {
         /* We consider a vector of float that is initialized just as any of C
           * data */
         float vector[NX];
         unsigned i;
         for (i = 0; i < NX; i++)
             vector[i] = 1.0f;

         fprintf(stderr, "BEFORE: First element was %f\n", vector[0]);

         /* Initialize StarPU with default configuration */
         starpu_init(NULL);

     #ifdef STARPU_USE_OPENCL
             starpu_opencl_load_opencl_from_file(
                    "examples/basic_examples/vector_scal_opencl_kernel.cl", &programs, NULL);
     #endif

         /* Tell StaPU to associate the "vector" vector with the "vector_handle"
          * identifier. When a task needs to access a piece of data, it should
          * refer to the handle that is associated to it.
          * In the case of the "vector" data interface:
          *  - the first argument of the registration method is a pointer to the
          *    handle that should describe the data
          *  - the second argument is the memory node where the data (ie. "vector")
          *    resides initially: 0 stands for an address in main memory, as
          *    opposed to an adress on a GPU for instance.
          *  - the third argument is the adress of the vector in RAM
          *  - the fourth argument is the number of elements in the vector
          *  - the fifth argument is the size of each element.
          */
         starpu_data_handle_t vector_handle;
         starpu_vector_data_register(&vector_handle, 0, (uintptr_t)vector,
                                     NX, sizeof(vector[0]));

         float factor = 3.14;

         /* create a synchronous task: any call to starpu_task_submit will block
           * until it is terminated */
         struct starpu_task *task = starpu_task_create();
         task->synchronous = 1;

         task->cl = &cl;

         /* the codelet manipulates one buffer in RW mode */
         task->handles[0] = vector_handle;

         /* an argument is passed to the codelet, beware that this is a
          * READ-ONLY buffer and that the codelet may be given a pointer to a
          * COPY of the argument */
         task->cl_arg = &factor;
         task->cl_arg_size = sizeof(factor);

         /* execute the task on any eligible computational ressource */
         starpu_task_submit(task);

         /* StarPU does not need to manipulate the array anymore so we can stop
           * monitoring it */
         starpu_data_unregister(vector_handle);

     #ifdef STARPU_USE_OPENCL
         starpu_opencl_unload_opencl(&programs);
     #endif

         /* terminate StarPU, no task can be submitted after */
         starpu_shutdown();

         fprintf(stderr, "AFTER First element is %f\n", vector[0]);

         return 0;
     }


File: starpu.info,  Node: CPU Kernel,  Next: CUDA Kernel,  Prev: Main application,  Up: Full source code for the 'Scaling a Vector' example

A.2 CPU Kernel
==============

     #include <starpu.h>
     #include <xmmintrin.h>

     /* This kernel takes a buffer and scales it by a constant factor */
     void scal_cpu_func(void *buffers[], void *cl_arg)
     {
         unsigned i;
         float *factor = cl_arg;

         /*
          * The "buffers" array matches the task->handles array: for instance
          * task->handles[0] is a handle that corresponds to a data with
          * vector "interface", so that the first entry of the array in the
          * codelet  is a pointer to a structure describing such a vector (ie.
          * struct starpu_vector_interface *). Here, we therefore manipulate
          * the buffers[0] element as a vector: nx gives the number of elements
          * in the array, ptr gives the location of the array (that was possibly
          * migrated/replicated), and elemsize gives the size of each elements.
          */
         struct starpu_vector_interface *vector = buffers[0];

         /* length of the vector */
         unsigned n = STARPU_VECTOR_GET_NX(vector);

         /* get a pointer to the local copy of the vector: note that we have to
          * cast it in (float *) since a vector could contain any type of
          * elements so that the .ptr field is actually a uintptr_t */
         float *val = (float *)STARPU_VECTOR_GET_PTR(vector);

         /* scale the vector */
         for (i = 0; i < n; i++)
             val[i] *= *factor;
     }

     void scal_sse_func(void *buffers[], void *cl_arg)
     {
         float *vector = (float *) STARPU_VECTOR_GET_PTR(buffers[0]);
         unsigned int n = STARPU_VECTOR_GET_NX(buffers[0]);
         unsigned int n_iterations = n/4;

         __m128 *VECTOR = (__m128*) vector;
         __m128 FACTOR __attribute__((aligned(16)));
         float factor = *(float *) cl_arg;
         FACTOR = _mm_set1_ps(factor);

         unsigned int i;
         for (i = 0; i < n_iterations; i++)
             VECTOR[i] = _mm_mul_ps(FACTOR, VECTOR[i]);

         unsigned int remainder = n%4;
         if (remainder != 0)
         {
             unsigned int start = 4 * n_iterations;
             for (i = start; i < start+remainder; ++i)
             {
                 vector[i] = factor * vector[i];
             }
         }
     }


File: starpu.info,  Node: CUDA Kernel,  Next: OpenCL Kernel,  Prev: CPU Kernel,  Up: Full source code for the 'Scaling a Vector' example

A.3 CUDA Kernel
===============

     #include <starpu.h>
     #include <starpu_cuda.h>

     static __global__ void vector_mult_cuda(float *val, unsigned n,
                                             float factor)
     {
             unsigned i =  blockIdx.x*blockDim.x + threadIdx.x;
             if (i < n)
                    val[i] *= factor;
     }

     extern "C" void scal_cuda_func(void *buffers[], void *_args)
     {
             float *factor = (float *)_args;

             /* length of the vector */
             unsigned n = STARPU_VECTOR_GET_NX(buffers[0]);
             /* local copy of the vector pointer */
             float *val = (float *)STARPU_VECTOR_GET_PTR(buffers[0]);
             unsigned threads_per_block = 64;
             unsigned nblocks = (n + threads_per_block-1) / threads_per_block;

             vector_mult_cuda<<<nblocks,threads_per_block, 0, starpu_cuda_get_local_stream()>>>(val, n, *factor);

             cudaStreamSynchronize(starpu_cuda_get_local_stream());
     }


File: starpu.info,  Node: OpenCL Kernel,  Prev: CUDA Kernel,  Up: Full source code for the 'Scaling a Vector' example

A.4 OpenCL Kernel
=================

* Menu:

* Invoking the kernel::
* Source of the kernel::


File: starpu.info,  Node: Invoking the kernel,  Next: Source of the kernel,  Up: OpenCL Kernel

A.4.1 Invoking the kernel
-------------------------

     #include <starpu.h>
     #include <starpu_opencl.h>

     extern struct starpu_opencl_program programs;

     void scal_opencl_func(void *buffers[], void *_args)
     {
         float *factor = _args;
         int id, devid, err;
         cl_kernel kernel;
         cl_command_queue queue;
         cl_event event;

         /* length of the vector */
         unsigned n = STARPU_VECTOR_GET_NX(buffers[0]);
         /* OpenCL copy of the vector pointer */
         cl_mem val = (cl_mem)STARPU_VECTOR_GET_DEV_HANDLE(buffers[0]);

         id = starpu_worker_get_id();
         devid = starpu_worker_get_devid(id);

         err = starpu_opencl_load_kernel(&kernel, &queue, &programs, "vector_mult_opencl",
                                         devid);
         if (err != CL_SUCCESS) STARPU_OPENCL_REPORT_ERROR(err);

         err = clSetKernelArg(kernel, 0, sizeof(val), &val);
         err |= clSetKernelArg(kernel, 1, sizeof(n), &n);
         err |= clSetKernelArg(kernel, 2, sizeof(*factor), factor);
         if (err) STARPU_OPENCL_REPORT_ERROR(err);

         {
             size_t global=n;
             size_t local;
             size_t s;
             cl_device_id device;

             starpu_opencl_get_device(devid, &device);
             err = clGetKernelWorkGroupInfo (kernel, device, CL_KERNEL_WORK_GROUP_SIZE,
                                             sizeof(local), &local, &s);
             if (err != CL_SUCCESS) STARPU_OPENCL_REPORT_ERROR(err);
             if (local > global) local=global;

             err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &global, &local, 0,
                                          NULL, &event);
             if (err != CL_SUCCESS) STARPU_OPENCL_REPORT_ERROR(err);
         }

         clFinish(queue);
         starpu_opencl_collect_stats(event);
         clReleaseEvent(event);

         starpu_opencl_release_kernel(kernel);
     }


File: starpu.info,  Node: Source of the kernel,  Prev: Invoking the kernel,  Up: OpenCL Kernel

A.4.2 Source of the kernel
--------------------------

     __kernel void vector_mult_opencl(__global float* val, int nx, float factor)
     {
             const int i = get_global_id(0);
             if (i < nx) {
                     val[i] *= factor;
             }
     }


File: starpu.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: Full source code for the 'Scaling a Vector' example,  Up: Top

Annexe B GNU Free Documentation License
***************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: starpu.info,  Node: Concept Index,  Next: Function Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* C extensions:                          C Extensions.         (line  6)
* GCC plug-in:                           C Extensions.         (line  6)
* heap_allocated attribute:              Registered Data Buffers.
                                                               (line 36)
* output type attribute:                 Defining Tasks.       (line 40)
* task:                                  Defining Tasks.       (line  6)
* task attribute:                        Defining Tasks.       (line 26)
* task implementation:                   Defining Tasks.       (line  6)
* task-based programming model:          StarPU in a Nutshell. (line 18)
* task_implementation attribute:         Defining Tasks.       (line 49)


File: starpu.info,  Node: Function Index,  Next: Datatype Index,  Prev: Concept Index,  Up: Top

Function Index
**************

 [index ]
* Menu:

* starpu_bcsr_data_register:             Registering Data.    (line  73)
* starpu_bcsr_get_c:                     Accessing BCSR Data Interfaces.
                                                              (line  38)
* STARPU_BCSR_GET_COLIND:                Accessing BCSR Data Interfaces.
                                                              (line  53)
* starpu_bcsr_get_elemsize:              Accessing BCSR Data Interfaces.
                                                              (line  42)
* starpu_bcsr_get_firstentry:            Accessing BCSR Data Interfaces.
                                                              (line  17)
* starpu_bcsr_get_local_colind:          Accessing BCSR Data Interfaces.
                                                              (line  27)
* starpu_bcsr_get_local_nzval:           Accessing BCSR Data Interfaces.
                                                              (line  22)
* starpu_bcsr_get_local_rowptr:          Accessing BCSR Data Interfaces.
                                                              (line  32)
* STARPU_BCSR_GET_NNZ:                   Accessing BCSR Data Interfaces.
                                                              (line  45)
* starpu_bcsr_get_nnz:                   Accessing BCSR Data Interfaces.
                                                              (line   7)
* starpu_bcsr_get_nrow:                  Accessing BCSR Data Interfaces.
                                                              (line  12)
* STARPU_BCSR_GET_NZVAL:                 Accessing BCSR Data Interfaces.
                                                              (line  49)
* starpu_bcsr_get_r:                     Accessing BCSR Data Interfaces.
                                                              (line  35)
* STARPU_BCSR_GET_ROWPTR:                Accessing BCSR Data Interfaces.
                                                              (line  57)
* starpu_block_data_register:            Registering Data.    (line  59)
* starpu_block_filter_func:              Partitioning BLAS interface.
                                                              (line   9)
* starpu_block_filter_func_block:        Partitioning Block Data.
                                                              (line   9)
* starpu_block_filter_func_vector:       Partitioning Vector Data.
                                                              (line   9)
* STARPU_BLOCK_GET_DEV_HANDLE:           Accessing Block Data Interfaces.
                                                              (line  40)
* STARPU_BLOCK_GET_ELEMSIZE:             Accessing Block Data Interfaces.
                                                              (line  71)
* starpu_block_get_elemsize:             Accessing Block Data Interfaces.
                                                              (line  34)
* STARPU_BLOCK_GET_LDY:                  Accessing Block Data Interfaces.
                                                              (line  61)
* STARPU_BLOCK_GET_LDZ:                  Accessing Block Data Interfaces.
                                                              (line  66)
* starpu_block_get_local_ldy:            Accessing Block Data Interfaces.
                                                              (line  20)
* starpu_block_get_local_ldz:            Accessing Block Data Interfaces.
                                                              (line  25)
* starpu_block_get_local_ptr:            Accessing Block Data Interfaces.
                                                              (line  30)
* STARPU_BLOCK_GET_NX:                   Accessing Block Data Interfaces.
                                                              (line  49)
* starpu_block_get_nx:                   Accessing Block Data Interfaces.
                                                              (line   7)
* STARPU_BLOCK_GET_NY:                   Accessing Block Data Interfaces.
                                                              (line  53)
* starpu_block_get_ny:                   Accessing Block Data Interfaces.
                                                              (line  11)
* STARPU_BLOCK_GET_NZ:                   Accessing Block Data Interfaces.
                                                              (line  57)
* starpu_block_get_nz:                   Accessing Block Data Interfaces.
                                                              (line  15)
* STARPU_BLOCK_GET_OFFSET:               Accessing Block Data Interfaces.
                                                              (line  45)
* STARPU_BLOCK_GET_PTR:                  Accessing Block Data Interfaces.
                                                              (line  37)
* starpu_bound_compute:                  Theoretical lower bound on execution time API.
                                                              (line  30)
* starpu_bound_print:                    Theoretical lower bound on execution time API.
                                                              (line  42)
* starpu_bound_print_dot:                Theoretical lower bound on execution time API.
                                                              (line  26)
* starpu_bound_print_lp:                 Theoretical lower bound on execution time API.
                                                              (line  34)
* starpu_bound_print_mps:                Theoretical lower bound on execution time API.
                                                              (line  38)
* starpu_bound_start:                    Theoretical lower bound on execution time API.
                                                              (line  19)
* starpu_bound_stop:                     Theoretical lower bound on execution time API.
                                                              (line  23)
* starpu_bus_get_count:                  Profiling API.       (line 157)
* starpu_bus_get_dst:                    Profiling API.       (line 166)
* starpu_bus_get_id:                     Profiling API.       (line 160)
* starpu_bus_get_profiling_info:         Profiling API.       (line 152)
* starpu_bus_get_src:                    Profiling API.       (line 163)
* starpu_bus_print_bandwidth:            Performance Model API.
                                                              (line 149)
* starpu_bus_profiling_helper_display_summary: Profiling API. (line 176)
* STARPU_CALLBACK:                       Insert Task Utility. (line  34)
* STARPU_CALLBACK_ARG:                   Insert Task Utility. (line  38)
* STARPU_CALLBACK_WITH_ARG:              Insert Task Utility. (line  43)
* starpu_canonical_block_filter_bcsr:    Partitioning BCSR Data.
                                                              (line   9)
* starpu_codelet_init:                   Codelets and Tasks.  (line 192)
* starpu_codelet_pack_args:              Insert Task Utility. (line  55)
* starpu_codelet_unpack_args:            Insert Task Utility. (line  60)
* starpu_combined_worker_assign_workerid: Using Parallel Tasks.
                                                              (line  29)
* starpu_combined_worker_can_execute_task: Using Parallel Tasks.
                                                              (line  37)
* starpu_combined_worker_get_count:      Using Parallel Tasks.
                                                              (line  22)
* starpu_combined_worker_get_description: Using Parallel Tasks.
                                                              (line  33)
* starpu_combined_worker_get_id:         Using Parallel Tasks.
                                                              (line  25)
* starpu_combined_worker_get_rank:       Using Parallel Tasks.
                                                              (line  15)
* starpu_combined_worker_get_size:       Using Parallel Tasks.
                                                              (line   9)
* starpu_conf_init:                      Initialization and Termination.
                                                              (line 107)
* STARPU_CPU:                            Codelets and Tasks.  (line  23)
* starpu_cpu_worker_get_count:           Workers' Properties. (line  28)
* starpu_crc32_be:                       Data Interface API.  (line 104)
* starpu_crc32_be_n:                     Data Interface API.  (line  97)
* starpu_crc32_string:                   Data Interface API.  (line 111)
* starpu_csr_data_register:              Registering Data.    (line  87)
* STARPU_CSR_GET_COLIND:                 Accessing CSR Data Interfaces.
                                                              (line  52)
* STARPU_CSR_GET_ELEMSIZE:               Accessing CSR Data Interfaces.
                                                              (line  64)
* starpu_csr_get_elemsize:               Accessing CSR Data Interfaces.
                                                              (line  36)
* STARPU_CSR_GET_FIRSTENTRY:             Accessing CSR Data Interfaces.
                                                              (line  60)
* starpu_csr_get_firstentry:             Accessing CSR Data Interfaces.
                                                              (line  16)
* starpu_csr_get_local_colind:           Accessing CSR Data Interfaces.
                                                              (line  26)
* starpu_csr_get_local_nzval:            Accessing CSR Data Interfaces.
                                                              (line  21)
* starpu_csr_get_local_rowptr:           Accessing CSR Data Interfaces.
                                                              (line  31)
* STARPU_CSR_GET_NNZ:                    Accessing CSR Data Interfaces.
                                                              (line  40)
* starpu_csr_get_nnz:                    Accessing CSR Data Interfaces.
                                                              (line   7)
* STARPU_CSR_GET_NROW:                   Accessing CSR Data Interfaces.
                                                              (line  44)
* starpu_csr_get_nrow:                   Accessing CSR Data Interfaces.
                                                              (line  11)
* STARPU_CSR_GET_NZVAL:                  Accessing CSR Data Interfaces.
                                                              (line  48)
* STARPU_CSR_GET_ROWPTR:                 Accessing CSR Data Interfaces.
                                                              (line  56)
* STARPU_CUBLAS_REPORT_ERROR:            CUDA extensions.     (line  55)
* starpu_cublas_report_error:            CUDA extensions.     (line  52)
* STARPU_CUDA:                           Codelets and Tasks.  (line  28)
* starpu_cuda_get_device_properties:     CUDA extensions.     (line  25)
* starpu_cuda_get_global_mem_size:       CUDA extensions.     (line  29)
* starpu_cuda_get_local_stream:          CUDA extensions.     (line  13)
* STARPU_CUDA_REPORT_ERROR:              CUDA extensions.     (line  36)
* starpu_cuda_report_error:              CUDA extensions.     (line  33)
* starpu_cuda_worker_get_count:          Workers' Properties. (line  32)
* starpu_data_acquire:                   Access registered data from the application.
                                                              (line   8)
* STARPU_DATA_ACQUIRE_CB:                Access registered data from the application.
                                                              (line  43)
* starpu_data_acquire_cb:                Access registered data from the application.
                                                              (line  29)
* starpu_data_advise_as_important:       Basic Data Library API.
                                                              (line 115)
* starpu_data_cpy:                       Miscellaneous helpers.
                                                              (line   9)
* starpu_data_expected_transfer_time:    Scheduling Policy API.
                                                              (line 192)
* starpu_data_get_child:                 Basic API.           (line  64)
* starpu_data_get_default_sequential_consistency_flag: Implicit Data Dependencies.
                                                              (line  28)
* starpu_data_get_interface_on_node:     Registering Data.    (line  92)
* starpu_data_get_nb_children:           Basic API.           (line  60)
* starpu_data_get_rank:                  MPI Insert Task Utility.
                                                              (line  28)
* starpu_data_get_sub_data:              Basic API.           (line  69)
* starpu_data_get_tag:                   MPI Insert Task Utility.
                                                              (line  19)
* starpu_data_interface_get_next_id:     An example of data interface.
                                                              (line   7)
* starpu_data_invalidate:                Basic Data Library API.
                                                              (line  79)
* starpu_data_lookup:                    Basic Data Library API.
                                                              (line 101)
* starpu_data_map_filters:               Basic API.           (line  85)
* starpu_data_partition:                 Basic API.           (line  39)
* starpu_data_prefetch_on_node:          Basic Data Library API.
                                                              (line  93)
* starpu_data_query_status:              Basic Data Library API.
                                                              (line 111)
* starpu_data_register:                  Basic Data Library API.
                                                              (line  41)
* starpu_data_register_same:             Basic Data Library API.
                                                              (line  60)
* starpu_data_release:                   Access registered data from the application.
                                                              (line  51)
* starpu_data_request_allocation:        Basic Data Library API.
                                                              (line 105)
* starpu_data_set_default_sequential_consistency_flag: Implicit Data Dependencies.
                                                              (line  18)
* starpu_data_set_rank:                  MPI Insert Task Utility.
                                                              (line  23)
* starpu_data_set_reduction_methods:     Basic Data Library API.
                                                              (line 121)
* starpu_data_set_sequential_consistency_flag: Implicit Data Dependencies.
                                                              (line  32)
* starpu_data_set_tag:                   MPI Insert Task Utility.
                                                              (line  16)
* starpu_data_set_wt_mask:               Basic Data Library API.
                                                              (line  86)
* starpu_data_unpartition:               Basic API.           (line  53)
* starpu_data_unregister:                Basic Data Library API.
                                                              (line  64)
* starpu_data_unregister_no_coherency:   Basic Data Library API.
                                                              (line  74)
* starpu_data_vget_sub_data:             Basic API.           (line  80)
* starpu_data_vmap_filters:              Basic API.           (line  91)
* starpu_display_codelet_stats:          Codelets and Tasks.  (line 465)
* STARPU_EXECUTE_ON_DATA:                MPI Insert Task Utility.
                                                              (line  36)
* starpu_execute_on_each_worker:         Miscellaneous helpers.
                                                              (line  20)
* STARPU_EXECUTE_ON_NODE:                MPI Insert Task Utility.
                                                              (line  31)
* starpu_force_bus_sampling:             Performance Model API.
                                                              (line 139)
* starpu_free:                           Basic Data Library API.
                                                              (line  14)
* STARPU_GCC_PLUGIN:                     Conditional Extensions.
                                                              (line  16)
* STARPU_GORDON:                         Codelets and Tasks.  (line  38)
* starpu_handle_get_interface_id:        Accessing Handle.    (line  19)
* starpu_handle_get_local_ptr:           Accessing Handle.    (line  14)
* starpu_handle_to_pointer:              Accessing Handle.    (line   8)
* starpu_helper_cublas_init:             CUDA extensions.     (line  40)
* starpu_helper_cublas_shutdown:         CUDA extensions.     (line  47)
* starpu_init:                           Initialization and Termination.
                                                              (line   7)
* starpu_insert_task:                    Insert Task Utility. (line  10)
* starpu_list_models:                    Performance Model API.
                                                              (line 146)
* starpu_load_history_debug:             Performance Model API.
                                                              (line 123)
* starpu_malloc:                         Basic Data Library API.
                                                              (line   7)
* starpu_matrix_data_register:           Registering Data.    (line  44)
* STARPU_MATRIX_GET_DEV_HANDLE:          Accessing Matrix Data Interfaces.
                                                              (line  37)
* STARPU_MATRIX_GET_ELEMSIZE:            Accessing Matrix Data Interfaces.
                                                              (line  59)
* starpu_matrix_get_elemsize:            Accessing Matrix Data Interfaces.
                                                              (line  28)
* STARPU_MATRIX_GET_LD:                  Accessing Matrix Data Interfaces.
                                                              (line  54)
* starpu_matrix_get_local_ld:            Accessing Matrix Data Interfaces.
                                                              (line  18)
* starpu_matrix_get_local_ptr:           Accessing Matrix Data Interfaces.
                                                              (line  24)
* STARPU_MATRIX_GET_NX:                  Accessing Matrix Data Interfaces.
                                                              (line  46)
* starpu_matrix_get_nx:                  Accessing Matrix Data Interfaces.
                                                              (line   8)
* STARPU_MATRIX_GET_NY:                  Accessing Matrix Data Interfaces.
                                                              (line  50)
* starpu_matrix_get_ny:                  Accessing Matrix Data Interfaces.
                                                              (line  13)
* STARPU_MATRIX_GET_OFFSET:              Accessing Matrix Data Interfaces.
                                                              (line  42)
* STARPU_MATRIX_GET_PTR:                 Accessing Matrix Data Interfaces.
                                                              (line  32)
* starpu_mpi_barrier:                    The API.             (line  72)
* starpu_mpi_gather_detached:            MPI Collective Operations.
                                                              (line  16)
* starpu_mpi_get_data_on_node:           MPI Insert Task Utility.
                                                              (line  77)
* starpu_mpi_initialize:                 The API.             (line  22)
* starpu_mpi_initialize_extended:        The API.             (line  28)
* starpu_mpi_insert_task:                MPI Insert Task Utility.
                                                              (line  42)
* starpu_mpi_irecv:                      The API.             (line  56)
* starpu_mpi_irecv_array_detached_unlock_tag: The API.        (line  91)
* starpu_mpi_irecv_detached:             The API.             (line  64)
* starpu_mpi_irecv_detached_unlock_tag:  The API.             (line  81)
* starpu_mpi_isend:                      The API.             (line  53)
* starpu_mpi_isend_array_detached_unlock_tag: The API.        (line  85)
* starpu_mpi_isend_detached:             The API.             (line  60)
* starpu_mpi_isend_detached_unlock_tag:  The API.             (line  76)
* starpu_mpi_recv:                       The API.             (line  50)
* starpu_mpi_scatter_detached:           MPI Collective Operations.
                                                              (line   8)
* starpu_mpi_send:                       The API.             (line  47)
* starpu_mpi_shutdown:                   The API.             (line  35)
* starpu_mpi_test:                       The API.             (line  70)
* starpu_mpi_wait:                       The API.             (line  67)
* starpu_multiformat_data_register:      Multiformat Data Interface.
                                                              (line  33)
* STARPU_MULTIFORMAT_GET_CPU_PTR:        Multiformat Data Interface.
                                                              (line  43)
* STARPU_MULTIFORMAT_GET_CUDA_PTR:       Multiformat Data Interface.
                                                              (line  46)
* STARPU_MULTIFORMAT_GET_NX:             Multiformat Data Interface.
                                                              (line  52)
* STARPU_MULTIFORMAT_GET_OPENCL_PTR:     Multiformat Data Interface.
                                                              (line  49)
* STARPU_MULTIPLE_CPU_IMPLEMENTATIONS:   Codelets and Tasks.  (line  48)
* STARPU_MULTIPLE_CUDA_IMPLEMENTATIONS:  Codelets and Tasks.  (line  54)
* STARPU_MULTIPLE_OPENCL_IMPLEMENTATIONS: Codelets and Tasks. (line  60)
* STARPU_OPENCL:                         Codelets and Tasks.  (line  43)
* starpu_opencl_allocate_memory:         OpenCL utilities.    (line  35)
* starpu_opencl_collect_stats:           OpenCL statistics.   (line   7)
* starpu_opencl_copy_opencl_to_ram:      OpenCL utilities.    (line  73)
* starpu_opencl_copy_opencl_to_ram_async_sync: OpenCL utilities.
                                                              (line  62)
* starpu_opencl_copy_ram_to_opencl:      OpenCL utilities.    (line  52)
* starpu_opencl_copy_ram_to_opencl_async_sync: OpenCL utilities.
                                                              (line  41)
* STARPU_OPENCL_DISPLAY_ERROR:           OpenCL utilities.    (line  14)
* starpu_opencl_display_error:           OpenCL utilities.    (line   8)
* starpu_opencl_get_context:             Writing OpenCL kernels.
                                                              (line  11)
* starpu_opencl_get_current_context:     Writing OpenCL kernels.
                                                              (line  25)
* starpu_opencl_get_current_queue:       Writing OpenCL kernels.
                                                              (line  29)
* starpu_opencl_get_device:              Writing OpenCL kernels.
                                                              (line  16)
* starpu_opencl_get_global_mem_size:     Writing OpenCL kernels.
                                                              (line   7)
* starpu_opencl_get_queue:               Writing OpenCL kernels.
                                                              (line  20)
* starpu_opencl_load_kernel:             Loading OpenCL kernels.
                                                              (line   9)
* starpu_opencl_load_opencl_from_file:   Compiling OpenCL kernels.
                                                              (line  24)
* starpu_opencl_load_opencl_from_string: Compiling OpenCL kernels.
                                                              (line  29)
* starpu_opencl_release_kernel:          Loading OpenCL kernels.
                                                              (line  14)
* STARPU_OPENCL_REPORT_ERROR:            OpenCL utilities.    (line  23)
* starpu_opencl_report_error:            OpenCL utilities.    (line  20)
* STARPU_OPENCL_REPORT_ERROR_WITH_MSG:   OpenCL utilities.    (line  29)
* starpu_opencl_set_kernel_args:         Writing OpenCL kernels.
                                                              (line  33)
* starpu_opencl_unload_opencl:           Compiling OpenCL kernels.
                                                              (line  33)
* starpu_opencl_worker_get_count:        Workers' Properties. (line  36)
* starpu_perfmodel_debugfilepath:        Performance Model API.
                                                              (line 130)
* starpu_perfmodel_get_arch_name:        Performance Model API.
                                                              (line 136)
* STARPU_PRIORITY:                       Insert Task Utility. (line  50)
* starpu_profiling_status_get:           Profiling API.       (line  19)
* starpu_profiling_status_set:           Profiling API.       (line   7)
* starpu_progression_hook_deregister:    Expert mode.         (line  15)
* starpu_progression_hook_register:      Expert mode.         (line  12)
* starpu_push_local_task:                Scheduling Policy API.
                                                              (line 162)
* starpu_sched_get_max_priority:         Scheduling Policy API.
                                                              (line 157)
* starpu_sched_get_min_priority:         Scheduling Policy API.
                                                              (line 153)
* starpu_sched_set_max_priority:         Scheduling Policy API.
                                                              (line 145)
* starpu_sched_set_min_priority:         Scheduling Policy API.
                                                              (line 136)
* starpu_set_profiling_id:               Profiling API.       (line  23)
* starpu_shutdown:                       Initialization and Termination.
                                                              (line 119)
* STARPU_SPU:                            Codelets and Tasks.  (line  33)
* starpu_spu_worker_get_count:           Workers' Properties. (line  41)
* starpu_tag_declare_deps:               Explicit Dependencies.
                                                              (line  34)
* starpu_tag_declare_deps_array:         Explicit Dependencies.
                                                              (line  54)
* starpu_tag_notify_from_apps:           Explicit Dependencies.
                                                              (line  83)
* starpu_tag_remove:                     Explicit Dependencies.
                                                              (line  78)
* starpu_tag_wait:                       Explicit Dependencies.
                                                              (line  62)
* starpu_tag_wait_array:                 Explicit Dependencies.
                                                              (line  73)
* starpu_task_bundle_close:              Task Bundles.        (line  34)
* starpu_task_bundle_create:             Task Bundles.        (line  14)
* starpu_task_bundle_insert:             Task Bundles.        (line  19)
* starpu_task_bundle_remove:             Task Bundles.        (line  27)
* starpu_task_create:                    Codelets and Tasks.  (line 402)
* starpu_task_declare_deps_array:        Explicit Dependencies.
                                                              (line   8)
* starpu_task_deinit:                    Codelets and Tasks.  (line 412)
* starpu_task_destroy:                   Codelets and Tasks.  (line 421)
* starpu_task_expected_conversion_time:  Scheduling Policy API.
                                                              (line 201)
* starpu_task_expected_data_transfer_time: Scheduling Policy API.
                                                              (line 187)
* starpu_task_expected_length:           Scheduling Policy API.
                                                              (line 179)
* starpu_task_expected_power:            Scheduling Policy API.
                                                              (line 196)
* starpu_task_get_current:               Codelets and Tasks.  (line 459)
* starpu_task_init:                      Codelets and Tasks.  (line 390)
* STARPU_TASK_INITIALIZER:               Codelets and Tasks.  (line 397)
* starpu_task_list_back:                 Task Lists.          (line  26)
* starpu_task_list_begin:                Task Lists.          (line  45)
* starpu_task_list_empty:                Task Lists.          (line  29)
* starpu_task_list_end:                  Task Lists.          (line  49)
* starpu_task_list_erase:                Task Lists.          (line  33)
* starpu_task_list_front:                Task Lists.          (line  22)
* starpu_task_list_init:                 Task Lists.          (line  10)
* starpu_task_list_next:                 Task Lists.          (line  53)
* starpu_task_list_pop_back:             Task Lists.          (line  41)
* starpu_task_list_pop_front:            Task Lists.          (line  37)
* starpu_task_list_push_back:            Task Lists.          (line  18)
* starpu_task_list_push_front:           Task Lists.          (line  14)
* starpu_task_submit:                    Codelets and Tasks.  (line 438)
* starpu_task_wait:                      Codelets and Tasks.  (line 429)
* starpu_task_wait_for_all:              Codelets and Tasks.  (line 455)
* starpu_task_wait_for_no_ready:         Codelets and Tasks.  (line 468)
* starpu_timing_now:                     Scheduling Policy API.
                                                              (line 175)
* starpu_timing_timespec_delay_us:       Profiling API.       (line 170)
* starpu_timing_timespec_to_us:          Profiling API.       (line 173)
* STARPU_USE_CUDA:                       CUDA extensions.     (line   7)
* STARPU_USE_OPENCL:                     OpenCL extensions.   (line  15)
* STARPU_VALUE:                          Insert Task Utility. (line  29)
* starpu_variable_data_register:         Registering Data.    (line  22)
* STARPU_VARIABLE_GET_ELEMSIZE:          Accessing Variable Data Interfaces.
                                                              (line  18)
* starpu_variable_get_elemsize:          Accessing Variable Data Interfaces.
                                                              (line   8)
* starpu_variable_get_local_ptr:         Accessing Variable Data Interfaces.
                                                              (line  12)
* STARPU_VARIABLE_GET_PTR:               Accessing Variable Data Interfaces.
                                                              (line  15)
* starpu_vector_data_register:           Registering Data.    (line  33)
* starpu_vector_divide_in_2_filter_func: Partitioning Vector Data.
                                                              (line  27)
* STARPU_VECTOR_GET_DEV_HANDLE:          Accessing Vector Data Interfaces.
                                                              (line  25)
* STARPU_VECTOR_GET_ELEMSIZE:            Accessing Vector Data Interfaces.
                                                              (line  38)
* starpu_vector_get_elemsize:            Accessing Vector Data Interfaces.
                                                              (line  13)
* starpu_vector_get_local_ptr:           Accessing Vector Data Interfaces.
                                                              (line  17)
* STARPU_VECTOR_GET_NX:                  Accessing Vector Data Interfaces.
                                                              (line  34)
* starpu_vector_get_nx:                  Accessing Vector Data Interfaces.
                                                              (line   8)
* STARPU_VECTOR_GET_OFFSET:              Accessing Vector Data Interfaces.
                                                              (line  30)
* STARPU_VECTOR_GET_PTR:                 Accessing Vector Data Interfaces.
                                                              (line  20)
* starpu_vector_list_filter_func:        Partitioning Vector Data.
                                                              (line  16)
* starpu_vertical_block_filter_func:     Partitioning BLAS interface.
                                                              (line  14)
* starpu_vertical_block_filter_func_csr: Partitioning BCSR Data.
                                                              (line  14)
* starpu_void_data_register:             Registering Data.    (line  13)
* starpu_wake_all_blocked_workers:       Expert mode.         (line   7)
* starpu_worker_can_execute_task:        Scheduling Policy API.
                                                              (line 170)
* starpu_worker_get_count:               Workers' Properties. (line  17)
* starpu_worker_get_count_by_type:       Workers' Properties. (line  23)
* starpu_worker_get_devid:               Workers' Properties. (line  65)
* starpu_worker_get_id:                  Workers' Properties. (line  44)
* starpu_worker_get_ids_by_type:         Workers' Properties. (line  52)
* starpu_worker_get_memory_node:         Workers' Properties. (line  96)
* starpu_worker_get_name:                Workers' Properties. (line  86)
* starpu_worker_get_perf_archtype:       Performance Model API.
                                                              (line 143)
* starpu_worker_get_profiling_info:      Profiling API.       (line 128)
* starpu_worker_get_relative_speedup:    Scheduling Policy API.
                                                              (line 183)
* starpu_worker_get_type:                Workers' Properties. (line  76)
* starpu_worker_profiling_helper_display_summary: Profiling API.
                                                              (line 179)
* starpu_worker_set_sched_condition:     Scheduling Policy API.
                                                              (line 124)
* starpufft_cleanup:                     StarPU FFT support.  (line 108)
* starpufft_destroy_plan:                StarPU FFT support.  (line 111)
* starpufft_execute:                     StarPU FFT support.  (line  98)
* starpufft_execute_handle:              StarPU FFT support.  (line 103)
* starpufft_free:                        StarPU FFT support.  (line  69)
* starpufft_malloc:                      StarPU FFT support.  (line  64)
* starpufft_plan_dft_1d:                 StarPU FFT support.  (line  73)
* starpufft_plan_dft_2d:                 StarPU FFT support.  (line  78)
* starpufft_start:                       StarPU FFT support.  (line  83)
* starpufft_start_handle:                StarPU FFT support.  (line  91)


File: starpu.info,  Node: Datatype Index,  Prev: Function Index,  Up: Top

Datatype Index
**************

 [index ]
* Menu:

* enum starpu_access_mode:               Basic Data Library API.
                                                              (line  18)
* enum starpu_archtype:                  Workers' Properties. (line   7)
* enum starpu_codelet_type:              Codelets and Tasks.  (line   9)
* enum starpu_data_interface_id:         Accessing Data Interfaces.
                                                              (line  12)
* enum starpu_perf_archtype:             Performance Model API.
                                                              (line   7)
* enum starpu_perfmodel_type:            Performance Model API.
                                                              (line  26)
* enum starpu_task_status:               Codelets and Tasks.  (line 198)
* starpu_data_handle_t:                  Basic Data Library API.
                                                              (line  31)
* starpu_tag_t:                          Explicit Dependencies.
                                                              (line  21)
* starpu_task_bundle_t:                  Task Bundles.        (line   7)
* struct starpu_bus_profiling_info:      Profiling API.       (line 137)
* struct starpu_codelet:                 Codelets and Tasks.  (line  66)
* struct starpu_conf:                    Initialization and Termination.
                                                              (line  18)
* struct starpu_data_copy_methods:       Data Interface API.  (line  51)
* struct starpu_data_filter:             Basic API.           (line   7)
* struct starpu_data_interface_ops:      Data Interface API.  (line   7)
* struct starpu_machine_topology:        Scheduling Policy API.
                                                              (line  12)
* struct starpu_multiformat_data_interface_ops: Multiformat Data Interface.
                                                              (line   7)
* struct starpu_opencl_program:          Compiling OpenCL kernels.
                                                              (line  16)
* struct starpu_per_arch_perfmodel:      Performance Model API.
                                                              (line  90)
* struct starpu_perfmodel:               Performance Model API.
                                                              (line  38)
* struct starpu_sched_policy:            Scheduling Policy API.
                                                              (line  72)
* struct starpu_task:                    Codelets and Tasks.  (line 216)
* struct starpu_task_list:               Task Lists.          (line   7)
* struct starpu_task_profiling_info:     Profiling API.       (line  26)
* struct starpu_worker_profiling_info:   Profiling API.       (line  93)


