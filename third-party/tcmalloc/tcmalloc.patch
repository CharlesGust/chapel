diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/configure google-perftools-1.7/configure
--- /users/gbt/tmp/google-perftools-1.7/configure	2011-02-03 01:36:37.000000000 -0600
+++ google-perftools-1.7/configure	2011-08-01 15:17:59.000000000 -0500
@@ -770,6 +770,8 @@
 X86_64_AND_NO_FP_BY_DEFAULT_TRUE
 ENABLE_FRAME_POINTERS_FALSE
 ENABLE_FRAME_POINTERS_TRUE
+ENABLE_LIBC_MALLOC_OVERRIDE_FALSE
+ENABLE_LIBC_MALLOC_OVERRIDE_TRUE
 UNWIND_LIBS
 ENABLE_STATIC_FALSE
 ENABLE_STATIC_TRUE
@@ -912,6 +914,7 @@
 with_pic
 with_gnu_ld
 enable_libtool_lock
+enable_libc_malloc_override
 enable_frame_pointers
 '
       ac_precious_vars='build_alias
@@ -1560,6 +1563,9 @@
   --enable-shared[=PKGS]  build shared libraries [default=yes]
   --enable-static[=PKGS]  build static libraries [default=yes]
   --disable-libtool-lock  avoid locking (might break parallel builds)
+  --enable-libc-malloc-override
+                          make the tcmalloc entry points override their libc
+                          malloc counterparts [default=yes]
   --enable-frame-pointers On x86_64 systems, compile with
                           -fno-omit-frame-pointer (see INSTALL)
 
@@ -5581,13 +5587,13 @@
 else
   lt_cv_nm_interface="BSD nm"
   echo "int some_variable = 0;" > conftest.$ac_ext
-  (eval echo "\"\$as_me:5584: $ac_compile\"" >&5)
+  (eval echo "\"\$as_me:5590: $ac_compile\"" >&5)
   (eval "$ac_compile" 2>conftest.err)
   cat conftest.err >&5
-  (eval echo "\"\$as_me:5587: $NM \\\"conftest.$ac_objext\\\"\"" >&5)
+  (eval echo "\"\$as_me:5593: $NM \\\"conftest.$ac_objext\\\"\"" >&5)
   (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
   cat conftest.err >&5
-  (eval echo "\"\$as_me:5590: output\"" >&5)
+  (eval echo "\"\$as_me:5596: output\"" >&5)
   cat conftest.out >&5
   if $GREP 'External.*some_variable' conftest.out > /dev/null; then
     lt_cv_nm_interface="MS dumpbin"
@@ -6793,7 +6799,7 @@
   ;;
 *-*-irix6*)
   # Find out which ABI we are using.
-  echo '#line 6796 "configure"' > conftest.$ac_ext
+  echo '#line 6802 "configure"' > conftest.$ac_ext
   if { { eval echo "\"\$as_me\":${as_lineno-$LINENO}: \"$ac_compile\""; } >&5
   (eval $ac_compile) 2>&5
   ac_status=$?
@@ -8666,11 +8672,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:8669: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:8675: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:8673: \$? = $ac_status" >&5
+   echo "$as_me:8679: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -9005,11 +9011,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:9008: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:9014: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:9012: \$? = $ac_status" >&5
+   echo "$as_me:9018: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -9110,11 +9116,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:9113: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:9119: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:9117: \$? = $ac_status" >&5
+   echo "$as_me:9123: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -9165,11 +9171,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:9168: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:9174: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:9172: \$? = $ac_status" >&5
+   echo "$as_me:9178: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -11549,7 +11555,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11552 "configure"
+#line 11558 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -11645,7 +11651,7 @@
   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2
   lt_status=$lt_dlunknown
   cat > conftest.$ac_ext <<_LT_EOF
-#line 11648 "configure"
+#line 11654 "configure"
 #include "confdefs.h"
 
 #if HAVE_DLFCN_H
@@ -13601,11 +13607,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:13604: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:13610: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>conftest.err)
    ac_status=$?
    cat conftest.err >&5
-   echo "$as_me:13608: \$? = $ac_status" >&5
+   echo "$as_me:13614: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s "$ac_outfile"; then
      # The compiler can only warn and ignore the option if not recognized
      # So say no if there are warnings other than the usual output.
@@ -13700,11 +13706,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:13703: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:13709: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:13707: \$? = $ac_status" >&5
+   echo "$as_me:13713: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -13752,11 +13758,11 @@
    -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
    -e 's: [^ ]*conftest\.: $lt_compiler_flag&:; t' \
    -e 's:$: $lt_compiler_flag:'`
-   (eval echo "\"\$as_me:13755: $lt_compile\"" >&5)
+   (eval echo "\"\$as_me:13761: $lt_compile\"" >&5)
    (eval "$lt_compile" 2>out/conftest.err)
    ac_status=$?
    cat out/conftest.err >&5
-   echo "$as_me:13759: \$? = $ac_status" >&5
+   echo "$as_me:13765: \$? = $ac_status" >&5
    if (exit $ac_status) && test -s out/conftest2.$ac_objext
    then
      # The compiler can only warn and ignore the option if not recognized
@@ -15799,6 +15805,27 @@
 
 
 
+# We can make the tcmalloc entry points either override the standard libc
+# malloc ones or not.  If we don't, tcmalloc only manages memory explicitly
+# allocated through its own entry points.
+# Check whether --enable-libc_malloc_override was given.
+if test "${enable_libc_malloc_override+set}" = set; then :
+  enableval=$enable_libc_malloc_override;
+else
+  enable_libc_malloc_override=yes
+fi
+
+
+
+if test "$enable_libc_malloc_override" = yes; then
+  ENABLE_LIBC_MALLOC_OVERRIDE_TRUE=
+  ENABLE_LIBC_MALLOC_OVERRIDE_FALSE='#'
+else
+  ENABLE_LIBC_MALLOC_OVERRIDE_TRUE='#'
+  ENABLE_LIBC_MALLOC_OVERRIDE_FALSE=
+fi
+
+
 # On x86_64, instead of libunwind, we can choose to compile with frame-pointers
 # (This isn't needed on i386, where -fno-omit-frame-pointer is the default).
 # Check whether --enable-frame_pointers was given.
@@ -17127,6 +17154,10 @@
   as_fn_error "conditional \"ENABLE_STATIC\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${ENABLE_LIBC_MALLOC_OVERRIDE_TRUE}" && test -z "${ENABLE_LIBC_MALLOC_OVERRIDE_FALSE}"; then
+  as_fn_error "conditional \"ENABLE_LIBC_MALLOC_OVERRIDE\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${ENABLE_FRAME_POINTERS_TRUE}" && test -z "${ENABLE_FRAME_POINTERS_FALSE}"; then
   as_fn_error "conditional \"ENABLE_FRAME_POINTERS\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/configure.ac google-perftools-1.7/configure.ac
--- /users/gbt/tmp/google-perftools-1.7/configure.ac	2011-02-03 01:35:35.000000000 -0600
+++ google-perftools-1.7/configure.ac	2011-07-06 13:12:17.000000000 -0500
@@ -202,6 +202,15 @@
 AC_CHECK_LIB(unwind, backtrace, UNWIND_LIBS=-lunwind, UNWIND_LIBS=)
 AC_SUBST(UNWIND_LIBS)
 
+# We can make the tcmalloc entry points either override the standard libc
+# malloc ones or not.  If we don't, tcmalloc only manages memory explicitly
+# allocated through its own entry points.
+AC_ARG_ENABLE(libc_malloc_override,
+              AS_HELP_STRING([--enable-libc-malloc-override],
+                             [make the tcmalloc entry points override their libc malloc counterparts [default=yes]]),
+	      , enable_libc_malloc_override=yes)
+AM_CONDITIONAL(ENABLE_LIBC_MALLOC_OVERRIDE, test "$enable_libc_malloc_override" = yes)
+
 # On x86_64, instead of libunwind, we can choose to compile with frame-pointers
 # (This isn't needed on i386, where -fno-omit-frame-pointer is the default).
 AC_ARG_ENABLE(frame_pointers,
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/Makefile.am google-perftools-1.7/Makefile.am
--- /users/gbt/tmp/google-perftools-1.7/Makefile.am	2011-01-28 18:03:29.000000000 -0600
+++ google-perftools-1.7/Makefile.am	2011-07-06 13:09:51.000000000 -0500
@@ -45,6 +45,13 @@
 NO_EXCEPTIONS =
 endif !GCC
 
+# We can make the tcmalloc entry points either override the standard libc
+# malloc ones or not.  If we don't, tcmalloc only manages memory explicitly
+# allocated through its own entry points.
+if ENABLE_LIBC_MALLOC_OVERRIDE
+AM_CXXFLAGS += -DLIBC_MALLOC_OVERRIDE
+endif ENABLE_LIBC_MALLOC_OVERRIDE
+
 # These are x86-specific, having to do with frame-pointers.  In
 # particular, some x86_64 systems do not insert frame pointers by
 # default (all i386 systems that I know of, do.  I don't know about
@@ -80,6 +87,9 @@
 WEAKEN = $(OBJCOPY) -W malloc -W free -W realloc -W calloc -W cfree \
          -W memalign -W posix_memalign -W valloc -W pvalloc \
          -W malloc_stats -W mallopt -W mallinfo \
+         -W __libc_malloc -W __libc_free -W __libc_realloc -W __libc_calloc \
+         -W __libc_memalign -W __posix_memalign \
+         -W __libc_valloc -W __libc_pvalloc \
          -W _Znwm -W _ZnwmRKSt9nothrow_t -W _Znam -W _ZnamRKSt9nothrow_t \
          -W _ZdlPv -W _ZdaPv \
          -W __Znwm -W __ZnwmRKSt9nothrow_t -W __Znam -W __ZnamRKSt9nothrow_t \
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/Makefile.in google-perftools-1.7/Makefile.in
--- /users/gbt/tmp/google-perftools-1.7/Makefile.in	2011-02-03 01:37:09.000000000 -0600
+++ google-perftools-1.7/Makefile.in	2011-07-22 15:49:43.000000000 -0500
@@ -58,40 +58,45 @@
 @GCC_TRUE@               -fno-builtin-valloc -fno-builtin-pvalloc
 
 
+# We can make the tcmalloc entry points either override the standard libc
+# malloc ones or not.  If we don't, tcmalloc only manages memory explicitly
+# allocated through its own entry points.
+@ENABLE_LIBC_MALLOC_OVERRIDE_TRUE@am__append_3 = -DLIBC_MALLOC_OVERRIDE
+
 # These are x86-specific, having to do with frame-pointers.  In
 # particular, some x86_64 systems do not insert frame pointers by
 # default (all i386 systems that I know of, do.  I don't know about
 # non-x86 chips).  We need to tell perftools what to do about that.
-@ENABLE_FRAME_POINTERS_TRUE@@X86_64_AND_NO_FP_BY_DEFAULT_TRUE@am__append_3 = -fno-omit-frame-pointer
-@ENABLE_FRAME_POINTERS_FALSE@@X86_64_AND_NO_FP_BY_DEFAULT_TRUE@am__append_4 = -DNO_FRAME_POINTER
-@MINGW_TRUE@am__append_5 = -Wl,-u__tcmalloc
+@ENABLE_FRAME_POINTERS_TRUE@@X86_64_AND_NO_FP_BY_DEFAULT_TRUE@am__append_4 = -fno-omit-frame-pointer
+@ENABLE_FRAME_POINTERS_FALSE@@X86_64_AND_NO_FP_BY_DEFAULT_TRUE@am__append_5 = -DNO_FRAME_POINTER
+@MINGW_TRUE@am__append_6 = -Wl,-u__tcmalloc
 noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
 	$(am__EXEEXT_4) $(am__EXEEXT_5) $(am__EXEEXT_6) \
 	$(am__EXEEXT_7) $(am__EXEEXT_8) $(am__EXEEXT_23)
 bin_PROGRAMS =
-@MINGW_TRUE@am__append_6 = libwindows.la libspinlock.la
+@MINGW_TRUE@am__append_7 = libwindows.la libspinlock.la
 
 # We also need to tell mingw that sysinfo.cc needs shlwapi.lib.
 # (We do this via a #pragma for msvc, but need to do it here for mingw).
-@MINGW_TRUE@am__append_7 = -lshlwapi
-@MINGW_FALSE@am__append_8 = libspinlock.la
-@WITH_STACK_TRACE_TRUE@am__append_9 = $(SG_STACKTRACE_INCLUDES)
+@MINGW_TRUE@am__append_8 = -lshlwapi
+@MINGW_FALSE@am__append_9 = libspinlock.la
+@WITH_STACK_TRACE_TRUE@am__append_10 = $(SG_STACKTRACE_INCLUDES)
 
 ### Making the library
-@WITH_STACK_TRACE_TRUE@am__append_10 = libstacktrace.la
+@WITH_STACK_TRACE_TRUE@am__append_11 = libstacktrace.la
 
 ### Unittests
-@WITH_STACK_TRACE_TRUE@am__append_11 = stacktrace_unittest
+@WITH_STACK_TRACE_TRUE@am__append_12 = stacktrace_unittest
 
 ### Documentation
-@WITH_STACK_TRACE_TRUE@am__append_12 = doc/pprof_remote_servers.html
+@WITH_STACK_TRACE_TRUE@am__append_13 = doc/pprof_remote_servers.html
 
 # Let unittests find pprof if they need to run it
-@WITH_STACK_TRACE_TRUE@am__append_13 = PPROF_PATH=$(top_srcdir)/src/pprof
+@WITH_STACK_TRACE_TRUE@am__append_14 = PPROF_PATH=$(top_srcdir)/src/pprof
 
 # On MSVC, we need our own versions of addr2line and nm to work with pprof.
 # This is a slight abuse of WINDOWS_PROJECTS, but not much
-@WITH_STACK_TRACE_TRUE@am__append_14 =  \
+@WITH_STACK_TRACE_TRUE@am__append_15 =  \
 @WITH_STACK_TRACE_TRUE@	vsprojects/nm-pdb/nm-pdb.vcproj \
 @WITH_STACK_TRACE_TRUE@	vsprojects/addr2line-pdb/addr2line-pdb.vcproj \
 @WITH_STACK_TRACE_TRUE@	src/windows/nm-pdb.c \
@@ -103,38 +108,38 @@
 # libraries anyway (so can't be LD_PRELOADed) -- in fact, anybody who
 # chooses not to build shared libraries won't be able to run this test.
 # TODO(csilvers): figure out how to nix ".exe" or otherwise work under mingw
-@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_15 = maybe_threads_unittest.sh$(EXEEXT)
-@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_16 = $(maybe_threads_unittest_sh_SOURCES)
-@MINGW_TRUE@am__append_17 = src/windows/port.h src/windows/port.cc
-@MINGW_FALSE@am__append_18 = system_alloc_unittest
+@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_16 = maybe_threads_unittest.sh$(EXEEXT)
+@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_17 = $(maybe_threads_unittest_sh_SOURCES)
+@MINGW_TRUE@am__append_18 = src/windows/port.h src/windows/port.cc
+@MINGW_FALSE@am__append_19 = system_alloc_unittest
 
 # This doesn't work with static linkage, because libtcmalloc.a isn't
 # happy with C linkage (it misses the stdc++ library).  Likewise with
 # mingw, which links foo.a even though it doesn't set ENABLE_STATIC.
 # TODO(csilvers): set enable_static=true in configure.ac:36?
-@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_19 = malloc_extension_c_test
+@ENABLE_STATIC_FALSE@@MINGW_FALSE@am__append_20 = malloc_extension_c_test
 # -ansi here is just to help ensure the code is bog-standard C.
-@ENABLE_STATIC_FALSE@@GCC_TRUE@@MINGW_FALSE@am__append_20 = -ansi
-@MINGW_FALSE@am__append_21 = memalign_unittest
+@ENABLE_STATIC_FALSE@@GCC_TRUE@@MINGW_FALSE@am__append_21 = -ansi
+@MINGW_FALSE@am__append_22 = memalign_unittest
 
 ### ------- tcmalloc_minimal_debug (thread-caching malloc with debugallocation)
 
 # Like tcmalloc.cc, debugallocation.cc needs exceptions to fulfill its
 # API.  Luckily, we can reuse everything else from tcmalloc_minimal.
-@WITH_DEBUGALLOC_TRUE@am__append_22 = libtcmalloc_minimal_debug.la
 @WITH_DEBUGALLOC_TRUE@am__append_23 = libtcmalloc_minimal_debug.la
+@WITH_DEBUGALLOC_TRUE@am__append_24 = libtcmalloc_minimal_debug.la
 
 ### Unittests
-@WITH_DEBUGALLOC_TRUE@am__append_24 = tcmalloc_minimal_debug_unittest \
+@WITH_DEBUGALLOC_TRUE@am__append_25 = tcmalloc_minimal_debug_unittest \
 @WITH_DEBUGALLOC_TRUE@	malloc_extension_debug_test \
 @WITH_DEBUGALLOC_TRUE@	memalign_debug_unittest \
 @WITH_DEBUGALLOC_TRUE@	realloc_debug_unittest \
 @WITH_DEBUGALLOC_TRUE@	debugallocation_test.sh$(EXEEXT)
-@WITH_DEBUGALLOC_TRUE@am__append_25 = $(debugallocation_test_sh_SOURCES)
+@WITH_DEBUGALLOC_TRUE@am__append_26 = $(debugallocation_test_sh_SOURCES)
 
 # This is the sub-program used by debugallocation_test.sh
-@WITH_DEBUGALLOC_TRUE@am__append_26 = debugallocation_test
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_27 = $(SG_TCMALLOC_INCLUDES)
+@WITH_DEBUGALLOC_TRUE@am__append_27 = debugallocation_test
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_28 = $(SG_TCMALLOC_INCLUDES)
 
 ### Making the library
 
@@ -142,12 +147,12 @@
 # for all files in this library -- except tcmalloc.cc which needs them
 # to fulfill its API.  Automake doesn't allow per-file CXXFLAGS, so we need
 # to separate into two libraries.
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_28 = libtcmalloc_internal.la
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_29 = libtcmalloc.la
-@WITH_HEAP_CHECKER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_30 = $(HEAP_CHECKER_SOURCES)
-@WITH_HEAP_CHECKER_FALSE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_31 = -DNO_HEAP_CHECK
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_29 = libtcmalloc_internal.la
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_30 = libtcmalloc.la
+@WITH_HEAP_CHECKER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_31 = $(HEAP_CHECKER_SOURCES)
 @WITH_HEAP_CHECKER_FALSE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_32 = -DNO_HEAP_CHECK
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_33 = libtcmalloc.la
+@WITH_HEAP_CHECKER_FALSE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_33 = -DNO_HEAP_CHECK
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_34 = libtcmalloc.la
 
 ### Unittests
 
@@ -155,7 +160,7 @@
 # tcmalloc_minimal.  (One would never do this on purpose, but perhaps
 # by accident...)  When we can compile libprofiler, we also link it in
 # to make sure that works too.
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_34 = tcmalloc_unittest \
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_35 = tcmalloc_unittest \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	tcmalloc_both_unittest \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	tcmalloc_large_unittest \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	raw_printer_test \
@@ -166,74 +171,74 @@
 # on, which it's not by default.  Use the "standard" value of 2^19.
 
 # These unittests often need to run binaries.  They're in the current dir
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_35 = TCMALLOC_SAMPLE_PARAMETER=524288 \
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_36 = TCMALLOC_SAMPLE_PARAMETER=524288 \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	BINDIR=. \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	TMPDIR=/tmp/perftools
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_36 = vsprojects/sampler_test/sampler_test.vcproj
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_37 = $(sampling_test_sh_SOURCES)
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_37 = vsprojects/sampler_test/sampler_test.vcproj
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_38 = $(sampling_test_sh_SOURCES)
 
 # This is the sub-program used by sampling_test.sh
 # The -g is so pprof can get symbol information.
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_38 = sampling_test
-@WITH_HEAP_PROFILER_TRUE@am__append_39 = heap-profiler_unittest.sh$(EXEEXT)
-@WITH_HEAP_PROFILER_TRUE@am__append_40 = $(heap_profiler_unittest_sh_SOURCES)
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_39 = sampling_test
+@WITH_HEAP_PROFILER_TRUE@am__append_40 = heap-profiler_unittest.sh$(EXEEXT)
+@WITH_HEAP_PROFILER_TRUE@am__append_41 = $(heap_profiler_unittest_sh_SOURCES)
 
 # These are sub-programs used by heap-profiler_unittest.sh
-@WITH_HEAP_PROFILER_TRUE@am__append_41 = heap-profiler_unittest
-@WITH_HEAP_CHECKER_TRUE@am__append_42 =  \
+@WITH_HEAP_PROFILER_TRUE@am__append_42 = heap-profiler_unittest
+@WITH_HEAP_CHECKER_TRUE@am__append_43 =  \
 @WITH_HEAP_CHECKER_TRUE@	heap-checker_unittest.sh$(EXEEXT) \
 @WITH_HEAP_CHECKER_TRUE@	heap-checker-death_unittest.sh$(EXEEXT)
-@WITH_HEAP_CHECKER_TRUE@am__append_43 =  \
+@WITH_HEAP_CHECKER_TRUE@am__append_44 =  \
 @WITH_HEAP_CHECKER_TRUE@	$(heap_checker_unittest_sh_SOURCES) \
 @WITH_HEAP_CHECKER_TRUE@	$(top_srcdir)/$(heap_checker_death_unittest_sh_SOURCES)
 
 # These are sub-programs used by heap-checker_unittest.sh
-@WITH_HEAP_CHECKER_TRUE@am__append_44 = heap-checker_unittest
+@WITH_HEAP_CHECKER_TRUE@am__append_45 = heap-checker_unittest
 
 ### Documentation (above and beyond tcmalloc_minimal documentation)
-@WITH_HEAP_PROFILER_TRUE@am__append_45 = doc/heapprofile.html doc/heap-example1.png
-@WITH_HEAP_CHECKER_TRUE@am__append_46 = doc/heap_checker.html
+@WITH_HEAP_PROFILER_TRUE@am__append_46 = doc/heapprofile.html doc/heap-example1.png
+@WITH_HEAP_CHECKER_TRUE@am__append_47 = doc/heap_checker.html
 
 ### ------- tcmalloc with debugallocation
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_47 = libtcmalloc_debug.la
 @WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_48 = libtcmalloc_debug.la
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_49 = libtcmalloc_debug.la
 
 ### Unittests
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_49 = tcmalloc_debug_unittest \
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_50 = tcmalloc_debug_unittest \
 @WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	sampler_debug_test \
 @WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	sampling_debug_test.sh$(EXEEXT)
 
 # This is the sub-program using by sampling_debug_test.sh
 # The -g is so pprof can get symbol information.
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_50 = sampling_debug_test
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_TRUE@am__append_51 = heap-profiler_debug_unittest.sh$(EXEEXT)
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_51 = sampling_debug_test
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_TRUE@am__append_52 = heap-profiler_debug_unittest.sh$(EXEEXT)
 
 # These are sub-programs used by heap-profiler_debug_unittest.sh
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_TRUE@am__append_52 = heap-profiler_debug_unittest
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_CHECKER_TRUE@am__append_53 = heap-checker_debug_unittest.sh$(EXEEXT)
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_PROFILER_TRUE@am__append_53 = heap-profiler_debug_unittest
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_CHECKER_TRUE@am__append_54 = heap-checker_debug_unittest.sh$(EXEEXT)
 
 # These are sub-programs used by heap-checker_debug_unittest.sh
-@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_CHECKER_TRUE@am__append_54 = heap-checker_debug_unittest
-@WITH_CPU_PROFILER_TRUE@am__append_55 = $(SG_CPU_PROFILER_INCLUDES)
+@WITH_DEBUGALLOC_TRUE@@WITH_HEAP_CHECKER_TRUE@am__append_55 = heap-checker_debug_unittest
+@WITH_CPU_PROFILER_TRUE@am__append_56 = $(SG_CPU_PROFILER_INCLUDES)
 
 ### Making the library
-@WITH_CPU_PROFILER_TRUE@am__append_56 = libprofiler.la
+@WITH_CPU_PROFILER_TRUE@am__append_57 = libprofiler.la
 
 ### Unittests
-@WITH_CPU_PROFILER_TRUE@am__append_57 = getpc_test \
+@WITH_CPU_PROFILER_TRUE@am__append_58 = getpc_test \
 @WITH_CPU_PROFILER_TRUE@	profiledata_unittest \
 @WITH_CPU_PROFILER_TRUE@	profile_handler_unittest \
 @WITH_CPU_PROFILER_TRUE@	profiler_unittest.sh$(EXEEXT)
-@WITH_CPU_PROFILER_TRUE@am__append_58 = $(profiler_unittest_sh_SOURCES)
+@WITH_CPU_PROFILER_TRUE@am__append_59 = $(profiler_unittest_sh_SOURCES)
 
 # These are sub-programs used by profiler_unittest.sh
-@WITH_CPU_PROFILER_TRUE@am__append_59 = profiler1_unittest profiler2_unittest profiler3_unittest \
+@WITH_CPU_PROFILER_TRUE@am__append_60 = profiler1_unittest profiler2_unittest profiler3_unittest \
 @WITH_CPU_PROFILER_TRUE@                   profiler4_unittest
 
 @WITH_CPU_PROFILER_FALSE@profiler2_unittest_DEPENDENCIES =
 
 ### Documentation
-@WITH_CPU_PROFILER_TRUE@am__append_60 = doc/cpuprofile.html \
+@WITH_CPU_PROFILER_TRUE@am__append_61 = doc/cpuprofile.html \
 @WITH_CPU_PROFILER_TRUE@                 doc/cpuprofile-fileformat.html \
 @WITH_CPU_PROFILER_TRUE@                 doc/pprof-test-big.gif \
 @WITH_CPU_PROFILER_TRUE@                 doc/pprof-test.gif \
@@ -248,9 +253,9 @@
 # works fine for .so files, it does not for .a files.  The easiest way
 # around this -- and I've tried a bunch of the hard ways -- is to just
 # to create another set of libraries that has both functionality in it.
-@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_61 = libtcmalloc_and_profiler.la
-@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_62 = tcmalloc_and_profiler_unittest
-@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_63 = libtcmalloc_and_profiler.la
+@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_62 = libtcmalloc_and_profiler.la
+@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_63 = tcmalloc_and_profiler_unittest
+@WITH_CPU_PROFILER_TRUE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@am__append_64 = libtcmalloc_and_profiler.la
 DIST_COMMON = README $(am__configure_deps) $(am__dist_doc_DATA_DIST) \
 	$(am__googleinclude_HEADERS_DIST) $(dist_man_MANS) \
 	$(noinst_HEADERS) $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
@@ -1462,6 +1467,8 @@
 EGREP = @EGREP@
 ENABLE_FRAME_POINTERS_FALSE = @ENABLE_FRAME_POINTERS_FALSE@
 ENABLE_FRAME_POINTERS_TRUE = @ENABLE_FRAME_POINTERS_TRUE@
+ENABLE_LIBC_MALLOC_OVERRIDE_FALSE = @ENABLE_LIBC_MALLOC_OVERRIDE_FALSE@
+ENABLE_LIBC_MALLOC_OVERRIDE_TRUE = @ENABLE_LIBC_MALLOC_OVERRIDE_TRUE@
 ENABLE_STATIC_FALSE = @ENABLE_STATIC_FALSE@
 ENABLE_STATIC_TRUE = @ENABLE_STATIC_TRUE@
 EXEEXT = @EXEEXT@
@@ -1501,7 +1508,6 @@
 PACKAGE_NAME = @PACKAGE_NAME@
 PACKAGE_STRING = @PACKAGE_STRING@
 PACKAGE_TARNAME = @PACKAGE_TARNAME@
-PACKAGE_URL = @PACKAGE_URL@
 PACKAGE_VERSION = @PACKAGE_VERSION@
 PATH_SEPARATOR = @PATH_SEPARATOR@
 PROFILER_SO_VERSION = @PROFILER_SO_VERSION@
@@ -1593,7 +1599,8 @@
 AM_CPPFLAGS = -I$(top_srcdir)/src $(am__append_1)
 
 # This is mostly based on configure options
-AM_CXXFLAGS = $(am__append_2) $(am__append_3) $(am__append_4)
+AM_CXXFLAGS = $(am__append_2) $(am__append_3) $(am__append_4) \
+	$(am__append_5)
 
 # The -no-undefined flag allows libtool to generate shared libraries for
 # Cygwin and MinGW.  LIBSTDCXX_LA_LINKER_FLAG is used to fix a Solaris bug.
@@ -1612,7 +1619,7 @@
 # accomplishes its tasks via patching, leaving no work for the linker
 # to identify, so the linker will ignore libtcmalloc by default unless
 # we explicitly create a dependency via -u.
-TCMALLOC_FLAGS = $(am__append_5)
+TCMALLOC_FLAGS = $(am__append_6)
 @HAVE_OBJCOPY_WEAKEN_FALSE@WEAKEN = :
 
 # If we have objcopy, make malloc/free/etc weak symbols.  That way folks
@@ -1625,20 +1632,23 @@
 @HAVE_OBJCOPY_WEAKEN_TRUE@WEAKEN = $(OBJCOPY) -W malloc -W free -W realloc -W calloc -W cfree \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W memalign -W posix_memalign -W valloc -W pvalloc \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W malloc_stats -W mallopt -W mallinfo \
+@HAVE_OBJCOPY_WEAKEN_TRUE@         -W __libc_malloc -W __libc_free -W __libc_realloc -W __libc_calloc \
+@HAVE_OBJCOPY_WEAKEN_TRUE@         -W __libc_memalign -W __posix_memalign \
+@HAVE_OBJCOPY_WEAKEN_TRUE@         -W __libc_valloc -W __libc_pvalloc \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W _Znwm -W _ZnwmRKSt9nothrow_t -W _Znam -W _ZnamRKSt9nothrow_t \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W _ZdlPv -W _ZdaPv \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W __Znwm -W __ZnwmRKSt9nothrow_t -W __Znam -W __ZnamRKSt9nothrow_t \
 @HAVE_OBJCOPY_WEAKEN_TRUE@         -W __ZdlPv -W __ZdaPv
 
-LIBS_TO_WEAKEN = libtcmalloc_minimal.la $(am__append_23) \
-	$(am__append_33) $(am__append_48) $(am__append_63)
+LIBS_TO_WEAKEN = libtcmalloc_minimal.la $(am__append_24) \
+	$(am__append_34) $(am__append_49) $(am__append_64)
 googleincludedir = $(includedir)/google
 # The .h files you want to install (that is, .h files that people
 # who install this package can include in their own applications.)
 # We'll add to this later, on a library-by-library basis
-googleinclude_HEADERS = $(am__append_9) \
-	$(SG_TCMALLOC_MINIMAL_INCLUDES) $(am__append_27) \
-	$(am__append_55)
+googleinclude_HEADERS = $(am__append_10) \
+	$(SG_TCMALLOC_MINIMAL_INCLUDES) $(am__append_28) \
+	$(am__append_56)
 # tcmalloc.h is a special case, because it's a .h.in file
 nodist_googleinclude_HEADERS = src/google/tcmalloc.h
 noinst_HEADERS = src/google/tcmalloc.h.in
@@ -1655,7 +1665,7 @@
 # end of the world.
 dist_doc_DATA = AUTHORS COPYING ChangeLog INSTALL NEWS README \
 	README_windows.txt TODO doc/index.html doc/designstyle.css \
-	$(am__append_12) doc/tcmalloc.html doc/overview.gif \
+	$(am__append_13) doc/tcmalloc.html doc/overview.gif \
 	doc/pageheap.gif doc/spanmap.gif doc/threadheap.gif \
 	doc/t-test1.times.txt \
 	doc/tcmalloc-opspercpusec.vs.threads.1024.bytes.png \
@@ -1680,13 +1690,13 @@
 	doc/tcmalloc-opspersec.vs.size.5.threads.png \
 	doc/tcmalloc-opspersec.vs.size.8.threads.png doc/overview.dot \
 	doc/pageheap.dot doc/spanmap.dot doc/threadheap.dot \
-	$(am__append_45) $(am__append_46) $(am__append_60)
+	$(am__append_46) $(am__append_47) $(am__append_61)
 
 # The libraries (.so's) you want to install
 # We'll add to this later, on a library-by-library basis
-lib_LTLIBRARIES = libtcmalloc_minimal.la $(am__append_22) \
-	$(am__append_29) $(am__append_47) $(am__append_56) \
-	$(am__append_61)
+lib_LTLIBRARIES = libtcmalloc_minimal.la $(am__append_23) \
+	$(am__append_30) $(am__append_48) $(am__append_57) \
+	$(am__append_62)
 # This is for 'convenience libraries' -- basically just a container for sources
 
 ### Making the library
@@ -1695,12 +1705,12 @@
 # for all files in this library -- except tcmalloc.cc which needs them
 # to fulfill its API.  Automake doesn't allow per-file CXXFLAGS, so we need
 # to separate into two libraries.
-noinst_LTLIBRARIES = liblogging.la libsysinfo.la $(am__append_6) \
-	$(am__append_8) $(am__append_10) \
-	libtcmalloc_minimal_internal.la $(am__append_28)
+noinst_LTLIBRARIES = liblogging.la libsysinfo.la $(am__append_7) \
+	$(am__append_9) $(am__append_11) \
+	libtcmalloc_minimal_internal.la $(am__append_29)
 WINDOWS_PROJECTS = google-perftools.sln \
 	vsprojects/low_level_alloc_unittest/low_level_alloc_unittest.vcproj \
-	$(am__append_14) \
+	$(am__append_15) \
 	vsprojects/libtcmalloc_minimal/libtcmalloc_minimal.vcproj \
 	vsprojects/tcmalloc_minimal_unittest/tcmalloc_minimal_unittest.vcproj \
 	vsprojects/tmu-static/tmu-static.vcproj \
@@ -1715,7 +1725,7 @@
 	vsprojects/realloc_unittest/realloc_unittest.vcproj \
 	vsprojects/stack_trace_table_test/stack_trace_table_test.vcproj \
 	vsprojects/thread_dealloc_unittest/thread_dealloc_unittest.vcproj \
-	$(am__append_36)
+	$(am__append_37)
 
 # unittests you want to run when people type 'make check'.
 # Note: tests cannot take any arguments!
@@ -1734,23 +1744,23 @@
 # standard libc!  At least, in some situations, some of the time.
 
 # These all tests components of tcmalloc_minimal
-TESTS = low_level_alloc_unittest atomicops_unittest $(am__append_11) \
+TESTS = low_level_alloc_unittest atomicops_unittest $(am__append_12) \
 	tcmalloc_minimal_unittest tcmalloc_minimal_large_unittest \
-	$(am__append_15) addressmap_unittest $(am__append_18) \
+	$(am__append_16) addressmap_unittest $(am__append_19) \
 	packed_cache_test frag_unittest markidle_unittest \
-	malloc_extension_test $(am__append_19) $(am__append_21) \
+	malloc_extension_test $(am__append_20) $(am__append_22) \
 	page_heap_test pagemap_unittest realloc_unittest \
 	stack_trace_table_test thread_dealloc_unittest \
-	$(am__append_24) $(am__append_34) $(am__append_39) \
-	$(am__append_42) $(am__append_49) $(am__append_51) \
-	$(am__append_53) $(am__append_57) $(am__append_62)
+	$(am__append_25) $(am__append_35) $(am__append_40) \
+	$(am__append_43) $(am__append_50) $(am__append_52) \
+	$(am__append_54) $(am__append_58) $(am__append_63)
 # TESTS_ENVIRONMENT sets environment variables for when you run unittest.
 # We always get "srcdir" set for free.
 # We'll add to this later, on a library-by-library basis.
-TESTS_ENVIRONMENT = $(am__append_13) $(am__append_35)
+TESTS_ENVIRONMENT = $(am__append_14) $(am__append_36)
 # All script tests should be added here
-noinst_SCRIPTS = $(am__append_16) $(am__append_25) $(am__append_37) \
-	$(am__append_40) $(am__append_43) $(am__append_58)
+noinst_SCRIPTS = $(am__append_17) $(am__append_26) $(am__append_38) \
+	$(am__append_41) $(am__append_44) $(am__append_59)
 
 # This is my own var, used for extra libraries I make that I need installed
 EXTRA_INSTALL = 
@@ -1777,7 +1787,7 @@
 libsysinfo_la_SOURCES = src/base/sysinfo.cc \
                         $(SYSINFO_INCLUDES)
 
-libsysinfo_la_LIBADD = $(NANOSLEEP_LIBS) $(am__append_7)
+libsysinfo_la_LIBADD = $(NANOSLEEP_LIBS) $(am__append_8)
 
 # For MinGW, we use also have to use libwindows Luckily, we need the
 # windows.a library in exactly the same place we need spinlock.a
@@ -2014,7 +2024,7 @@
                                $(LOGGING_INCLUDES)
 
 addressmap_unittest_SOURCES = src/tests/addressmap_unittest.cc \
-	$(ADDRESSMAP_UNITTEST_INCLUDES) $(am__append_17)
+	$(ADDRESSMAP_UNITTEST_INCLUDES) $(am__append_18)
 addressmap_unittest_CXXFLAGS = -g $(AM_CXXFLAGS)
 addressmap_unittest_LDADD = liblogging.la
 @MINGW_FALSE@system_alloc_unittest_SOURCES = src/config_for_unittests.h \
@@ -2054,7 +2064,7 @@
 @ENABLE_STATIC_FALSE@@MINGW_FALSE@malloc_extension_c_test_CFLAGS =  \
 @ENABLE_STATIC_FALSE@@MINGW_FALSE@	$(PTHREAD_CFLAGS) \
 @ENABLE_STATIC_FALSE@@MINGW_FALSE@	$(AM_CFLAGS) \
-@ENABLE_STATIC_FALSE@@MINGW_FALSE@	$(am__append_20)
+@ENABLE_STATIC_FALSE@@MINGW_FALSE@	$(am__append_21)
 @ENABLE_STATIC_FALSE@@MINGW_FALSE@malloc_extension_c_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)
 @ENABLE_STATIC_FALSE@@MINGW_FALSE@malloc_extension_c_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)
 @MINGW_FALSE@memalign_unittest_SOURCES = src/tests/memalign_unittest.cc \
@@ -2170,17 +2180,17 @@
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(PTHREAD_CFLAGS) -DNDEBUG \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(AM_CXXFLAGS) \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(NO_EXCEPTIONS) \
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_31)
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_32)
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_internal_la_LDFLAGS = $(PTHREAD_CFLAGS)
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_internal_la_LIBADD = libstacktrace.la $(PTHREAD_LIBS)
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_la_SOURCES =  \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(TCMALLOC_CC) \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(TCMALLOC_INCLUDES) \
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_30)
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_31)
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_la_CXXFLAGS =  \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(PTHREAD_CFLAGS) -DNDEBUG \
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(AM_CXXFLAGS) \
-@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_32)
+@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@	$(am__append_33)
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_la_LDFLAGS = $(PTHREAD_CFLAGS) -version-info @TCMALLOC_SO_VERSION@
 @WITH_HEAP_PROFILER_OR_CHECKER_TRUE@libtcmalloc_la_LIBADD = libtcmalloc_internal.la $(PTHREAD_LIBS)
 @WITH_HEAP_CHECKER_FALSE@@WITH_HEAP_PROFILER_OR_CHECKER_TRUE@HEAP_CHECKER_SOURCES = 
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/src/config.h.in google-perftools-1.7/src/config.h.in
--- /users/gbt/tmp/google-perftools-1.7/src/config.h.in	2011-02-03 01:37:16.000000000 -0600
+++ google-perftools-1.7/src/config.h.in	2011-08-01 16:16:48.472060629 -0500
@@ -119,9 +119,6 @@
 /* Define to 1 if the system has the type `struct mallinfo'. */
 #undef HAVE_STRUCT_MALLINFO
 
-/* Define to 1 if you have the <sys/param.h> header file. */
-#undef HAVE_SYS_PARAM_H
-
 /* Define to 1 if you have the <sys/prctl.h> header file. */
 #undef HAVE_SYS_PRCTL_H
 
@@ -198,9 +195,6 @@
 /* Define to the one symbol short name of this package. */
 #undef PACKAGE_TARNAME
 
-/* Define to the home page for this package. */
-#undef PACKAGE_URL
-
 /* Define to the version of this package. */
 #undef PACKAGE_VERSION
 
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/src/system-alloc.cc google-perftools-1.7/src/system-alloc.cc
--- /users/gbt/tmp/google-perftools-1.7/src/system-alloc.cc	2011-01-21 21:34:07.000000000 -0600
+++ google-perftools-1.7/src/system-alloc.cc	2011-07-06 15:46:54.000000000 -0500
@@ -154,7 +154,7 @@
 
 static const int kStaticAllocators = 3;
 // kMaxDynamicAllocators + kStaticAllocators;
-static const int kMaxAllocators = 5;
+static const int kMaxAllocators = 6;
 static SysAllocator *allocators[kMaxAllocators];
 
 bool RegisterSystemAllocator(SysAllocator *a, int priority) {
@@ -422,6 +422,23 @@
 void InitSystemAllocators(void) {
   // This determines the order in which system allocators are called
   int i = kMaxDynamicAllocators;
+
+  //
+  // If Chapel supplies a static pool allocator, then that is our only
+  // static one.
+  //
+  {
+    extern
+      ATTRIBUTE_WEAK SysAllocator *chpl_mem_createStaticPoolSysAllocator(void);
+    SysAllocator *a;
+
+    if (chpl_mem_createStaticPoolSysAllocator != NULL
+	&& (a = chpl_mem_createStaticPoolSysAllocator()) != NULL) {
+      allocators[i++] = a;
+      return;
+    }
+  }
+
   allocators[i++] = new (devmem_space) DevMemSysAllocator();
 
   // In 64-bit debug mode, place the mmap allocator first since it
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/src/system-alloc.h google-perftools-1.7/src/system-alloc.h
--- /users/gbt/tmp/google-perftools-1.7/src/system-alloc.h	2010-03-31 18:50:18.000000000 -0500
+++ google-perftools-1.7/src/system-alloc.h	2011-07-01 12:57:24.000000000 -0500
@@ -109,7 +109,7 @@
                                                        int priority);
 
 // Number of SysAllocators known to call RegisterSystemAllocator
-static const int kMaxDynamicAllocators = 2;
+static const int kMaxDynamicAllocators = 3;
 
 // Retrieve the current state of various system allocators.
 extern PERFTOOLS_DLL_DECL void DumpSystemAllocatorStats(TCMalloc_Printer* printer);
diff -u '--exclude=libtool' '--exclude=.svn' -r /users/gbt/tmp/google-perftools-1.7/src/tcmalloc.cc google-perftools-1.7/src/tcmalloc.cc
--- /users/gbt/tmp/google-perftools-1.7/src/tcmalloc.cc	2010-12-18 04:20:37.000000000 -0600
+++ google-perftools-1.7/src/tcmalloc.cc	2011-07-06 13:08:02.000000000 -0500
@@ -254,6 +254,7 @@
 }  // extern "C"
 #endif  // #ifndef _WIN32
 
+#if defined(LIBC_MALLOC_OVERRIDE)
 // Override the libc functions to prefer our own instead.  This comes
 // first so code in tcmalloc.cc can use the overridden versions.  One
 // exception: in windows, by default, we patch our code into these
@@ -374,6 +375,7 @@
 #undef ALIAS
 
 #endif  // #ifndef(WIN32_DO_PATCHING) && ndef(TCMALLOC_FOR_DEBUGALLOCATION)
+#endif  // #if defined(LIBC_MALLOC_OVERRIDE)
 
 
 // ----------------------- IMPLEMENTATION -------------------------------
