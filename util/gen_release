#!/usr/bin/env perl

if (!defined $ENV{'CHPL_HOME_REPOSITORY'}) {
    print "ERROR: CHPL_HOME_REPOSITORY must be set to use gen_release\n";
    exit(1);
}

# check out a clean copy of the sources into a temporary directory
$pid = getpgrp();
$user = `whoami`;
chomp($user);
if ($basetmpdir eq "") {
    $basetmpdir = $ENV{'TMPDIR'};
}
if ($basetmpdir eq "") {
    $basetmpdir = "/tmp";
}
$tmpdir = "$basetmpdir/chapel-release.$user.$pid.deleteme";
$chapeldir = "$tmpdir/chapel-gen_release";
$svnroot = $ENV{'CHPL_HOME_REPOSITORY'};
if ($svnroot eq "") {
    $svnroot = "https://chapel.svn.sourceforge.net/svnroot/chapel/trunk";
}
system("mkdir $tmpdir > /dev/null");
print "Checking out the sources...\n";
system("cd $tmpdir && svn export -q $svnroot chapel");


# explicit files to include
@files = (
       "ACKNOWLEDGEMENTS",
       "AGREEMENT",
       "CHANGES",
       "CONTRIBUTORS",
       "COPYRIGHT", 
       "GOALS",
       "LICENSE",
       "Makefile",
       "README",
       "README.files",
       "STATUS",
       "compiler/passes/reservedSymbolNames",
       "etc/README",
       "man/man1/chpl.1",
       "third-party/Makefile",
       "third-party/README",
       "util/README",
       "util/chpl-multirealm",
       "util/printchplenv",
       "util/setchplenv.bash",
       "util/setchplenv.csh",
       "util/setchplenv.sh"
);

# C/C++ sources
@code_dirs = (
    "compiler"
);

# include these dirs and their entire contents
@complete_dirs = (
    "compiler/etc",
    "doc",
    "etc/emacs",
    "etc/vim",
    "examples",
    "make",
    "modules",
    "runtime",
    "third-party/dlmalloc",
    "third-party/gasnet",
    "third-party/pvm",
    "util/chplenv"
);


chdir "$tmpdir";

print "Tagging the files with copyright messages...\n";
system("cd chapel && make -f make/Makefile.release");

print "Generating the bison/flex files...\n";
system("cd chapel/compiler/parser && make lex.yy.cpp > /dev/null");

print "Creating the BUILD_VERSION file...\n";
system("cd chapel/compiler && export CHPL_DEVELOPER=true && make main/BUILD_VERSION > /dev/null");

print "Creating the examples directory...\n";
system("cd chapel && rm -r examples");
system("cd chapel && cp -r test/release/examples .");
system("cd chapel/util && cp start_test ../examples/");
system("cd chapel/examples && mkdir Bin");
system("cd chapel/test/Bin && cp timedexec sub_test sub_clean computePerfStats.pl filterSuppressions.pl testEnv.pl ../../examples/Bin/");

print "Building the man page...\n";
system("cd chapel && make man");

print "Creating the docs directory...\n";
system("cd chapel && mv doc doctmp");
system("cd chapel && mv doctmp/release doc");
system("cd chapel && rm -r doctmp");

print "Removing Makefiles that are not intended for release...\n";
system("cd chapel/make/platform && rm Makefile.sunos_old");

print "Removing compiler directories that are not intended for release...\n";
system("cd chapel/compiler/include && rm -r sunos_old");

print "Removing runtime directories that are not ready for release...\n";
system("cd chapel/runtime/src/comm && rm -r armci");
system("cd chapel/runtime/src/comm && rm -r mpi");
system("cd chapel/runtime/src/launch && rm -r apsim");
system("cd chapel/runtime/src/launch && rm -r dummy");
system("cd chapel/runtime/src/launch && rm -r mpirun");
system("cd chapel/runtime/src/launch && rm -r zebra");
system("cd chapel/runtime/include/tasks && rm -r nanos");
system("cd chapel/runtime/src/tasks && rm -r nanos");
system("cd chapel/runtime/include && rm -r sunos_old");

foreach $file (@files) {
    $dfile = "chapel/$file";
    if (!(-e $dfile)) {
        print "$dfile does not exist\n";
        exit( 9);
    }
    push @tarfiles, $dfile;
}

foreach $dir (@code_dirs) {
    @filelist = `find chapel/$dir`;
    foreach $fullpath (@filelist) {
        chomp $fullpath;
        $file = $fullpath;
        $file =~ s/(\S+\/)+//g;
        if ($file =~ /(\.(h|cpp|c|ypp|lex)$)|Makefile|README|BUILD_VERSION/) {
            # print "$fullpath\n";
            push @tarfiles, $fullpath;
        }
    }
}

foreach $dir (@complete_dirs) {
    push @tarfiles, "chapel\/$dir";
}


if (defined($ENV{"CHPL_HOME"})) {
    $resultdir = $ENV{"CHPL_HOME"};
    $resultdir = "$resultdir/tar";
} else {
    $resultdir = $basetmpdir;
}

$cmd = "tar -cz -f $resultdir/chapel.tar.gz @tarfiles";
#print "$cmd\n";
system ($cmd);

print "Left result in $resultdir/chapel.tar.gz\n";

system("rm -r $tmpdir");
