#!/usr/bin/env perl

use Text::ParseWords;
#use strict;
my $format_file_name = $ARGV[0]; 
my $outputdir = $ARGV[1]; 
my $start_date = $ARGV[2];
my $exec_time_out = $ARGV[3];

my $graph_file_name; 
my $graph_title; 
my $graph_ylabel; 
my @graph_keys; 
my @data_files; 
my @graph_key_labels;

my $key_file = "$format_file_name.perfkeys"; 
my $data_file = "$outputdir/$format_file_name.dat"; 
my $format_file = "$format_file_name.graph"; 
my $gpl_file = "$outputdir/$format_file_name.gpl"; 
my $gif_file = "$outputdir/$format_file_name.gif"; 
my $errors_file = "$outputdir/$format_file_name.errors"; 
my $fatal_errors = 0;
my $custom = 0;  
my $custom_start_date = 0;
my $src_file = "$format_file_name.chpl";

# change name of processGraphFile and w/e it calls~~~~~
# set defaults for making the .gif
# continue on to process the format file and make the graphs
&setDefaults;
&processGraphFile;


# auxilliary functions

# get start date (date of first performance run)
sub getStartDate {
    if ($exec_time_out eq "False") {
        my $data_file_temp = $_[0];
        open STATS, "$data_file_temp" or die "can't open $data_file_temp $!";
        my @stat_lines = <STATS>;
        my $header_line = @stat_lines[1];
        my @headers = parse_line('\t', 0, $header_line);
        return @headers[0];
    }  
}

sub getMinDate {
    my ($date1, $date2) = @_;
    my ($mon1, $mday1, $year1) = split(/\//, $date1);
    my ($mon2, $mday2, $year2) = split(/\//, $date2);
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime time;
    $mon += 1;
    $year -= 100;

    if ($year1 > $year) {
	$year1 += 1900;
    } else {
	$year1 += 2000;
    }

    if ($year2 > $year) {
	$year2 += 1900;
    } else {
	$year2 += 2000;
    }

    my $result;

    if ($year1 < $year2) {
	$result = $date1;
    } elsif ($year1 > $year2) {
	$result = $date2;
    } else {
	if ($mon1 < $mon2) {
	    $result = $date1;
        } elsif ($mon1 > $mon2) {
	    $result = $date2;
   	} else {  
	    if ($mday1 < $mday2) {
		$result = $date1;
	    } else {
		$result = $date2;
	    }
        }
    }

    return $result;

}


# setting default arguments to makeGraph 
sub setDefaults {
    if (-e $src_file) {
        $key_file = "$format_file_name.perfkeys";
    
        open KEYS, "$key_file" or die "can't open $key_file $!";
        my @keys = <KEYS>;
        close(KEYS);
        foreach  my $key (@keys) {
	    chomp($key);
        }

        @graph_keys = @keys;
    } 
    $graph_file_name = $format_file_name;	
    $graph_title = "$graph_file_name performance over time";
    $graph_ylabel = "performance";
}


sub processGraphFile {
    $format_file = "$format_file_name.graph";
    open FORMAT, "$format_file" or die "can't open $format_file $!";

    my $local = 1;

    while ($line = <FORMAT>) {
        chomp($line);
        my @words = (split / /, $line);
        if (@words[0] eq "perfkeys:") {
	    my $graph_keys_line = join(" ", @words[1..$#words]);
	    @graph_keys = split(/, /, $graph_keys_line);

    	    $line = <FORMAT>;
	    chomp($line);
	    @words = (split / /, $line);
	    while (@words[0] && (@words[0] ne "perfkeys:")) {
	        if (@words[0] eq "files:") {
		    $local = 0;
	            my $data_files_line = join(" ", @words[1..$#words]);
		    @data_files = split(/, /, $data_files_line);
	    	    foreach my $data_file (@data_files)  {
		    }	 
	        } elsif (@words[0] eq "graphname:") {
	            $graph_file_name = @words[1];
	        } elsif (@words[0] eq "graphtitle:") {
		    $graph_title = join(" ", @words[1..$#words]);
	        } elsif (@words[0] eq "ylabel:")  {
		    $graph_ylabel = join(" ", @words[1..$#words]);
	        } elsif (@words[0] eq "graphkeys:") {
		    my $graph_key_labels_line = join(" ", @words[1..$#words]);
		    @graph_key_labels = split(/, /, $graph_key_labels_line);
		} elsif (@words[0] eq "startdate:") {
		    $custom_start_date = 1;
		    $start_date = @words[1];
                } else {
	 	    print "improper format of $format_file, exiting\n";
		    exit 1;
	        } 
	        $line = <FORMAT>;
                chomp($line);
	        @words = (split / /, $line);
	    }
        } else {
	    while (@words[0] && (@words[0] ne "perfkeys:")) {
                if (@words[0] eq "graphname:") {
	            $graph_file_name = @words[1];
	        } elsif (@words[0] eq "graphtitle:") {
		    $graph_title = join(" ", @words[1..$#words]);
	        } elsif (@words[0] eq "ylabel:")  {
	            $graph_ylabel = join(" ", @words[1..$#words]);
	        } elsif (@words[0] eq "startdate:") {
		    $custom_start_date = 1;
		    $start_date = @words[1];
                } else {
		    print "improper format of $format_file, exiting\n";
		    exit 1;
	        }
	        $line = <FORMAT>;
	        chomp($line);
	        @words = split(/ /, $line);
	    }
        }
        if (($local == 0) && ($#graph_keys != $#data_files)) {
	    print "[Error: files do not match up with keys, $#graph_keys keys and $#data_files files]\n";
 	    exit 1;
        }
        $custom = 1;
        &makeGraph($start_date, $local, $graph_file_name, $graph_title, $graph_ylabel, @graph_keys);
    }
    if (!$custom) {
        &makeGraph($start_date, $local, $graph_file_name, $graph_title, $graph_ylabel, @graph_keys);
    }
}

# makeGraph outputs a .gif in perfdir (by default ./perfdat/<machine>) via gnuplot
sub makeGraph {
    my ($start_date, $local, $graph_file_name, $graph_title, $graph_ylabel, @graph_keys) = @_;
    if (($custom_start_date == 0 && !$start_date) || ($start_date eq "")) {
        if ($local == 0) {
	    $start_date = &getStartDate("$outputdir/@data_files[0]");
            foreach my $data_file (@data_files[1..$#data_files]) {
		$start_date = &getMinDate(&getStartDate("$outputdir/$data_file"), $start_date); 
	    } 
        } else {
	    $start_date = &getStartDate($data_file);
	}
    }

    open GNUPLOT_COMMANDS, ">$gpl_file" or die "can't open $gpl_file for creating $!";

    print GNUPLOT_COMMANDS "set terminal gif size 1200\n"; 
    print GNUPLOT_COMMANDS "set size ratio 0.33\n"; # figure out how to adjust this setting to x-axis range?
    print GNUPLOT_COMMANDS "set xdata time\n";
    print GNUPLOT_COMMANDS "set timefmt \"%m/%d/%y\"\n";
    print GNUPLOT_COMMANDS "set format x \"%m/%d/%y\"\n";
    print GNUPLOT_COMMANDS "set xlabel \"date (MM/DD/YY)\"\n";
    print GNUPLOT_COMMANDS "set key left\n";
    print GNUPLOT_COMMANDS "set ylabel \"$graph_ylabel\"\n";
    print GNUPLOT_COMMANDS "set xrange [\"$start_date\":*]\n";
    print GNUPLOT_COMMANDS "set yrange [0:*]\n";  
    print GNUPLOT_COMMANDS "set title \"$graph_title\"\n";
    print GNUPLOT_COMMANDS "set output \"$outputdir/$graph_file_name.gif\"\n";
    print GNUPLOT_COMMANDS "plot \\\n";

    my $graph_key_index = 0; 
    my $line_type;
    foreach my $graph_key (@graph_keys[0..$#graph_keys]) {
	my $key_file = $key_file;
	if ($local == 0) {
	    # need to re-assign $data_file, $key_file
	    $data_file = "$outputdir/@data_files[$graph_key_index]";

	    my @data_file_parts = (split /\//, $data_file);
	    my @data_name = (split /\./, @data_file_parts[$#data_file_parts]);
	    my $data_name = @data_name[0];
	    $key_file = "$data_name.perfkeys";
        }

	
	open KEYS, "$key_file" or die "can't open $key_file $!";
	@keys = <KEYS>;
	close (KEYS);
	foreach my $key (@keys) {
	    chomp($key);
	} 

        $line_type = ($graph_key_index % 8) + 1; 
        my $key_index = 0;
 	while (($key_index <= $#keys) && ($graph_key ne @keys[$key_index])) {
	    if ($key_index == $#keys) {
		print "[Error: $graph_key does not match any key in $key_file]\n";
		exit 1;
	    }
            $key_index++;
	}
 	my $column_index = $key_index + 2;
	
	if ($#graph_keys == $#graph_key_labels) {
	    $graph_key = @graph_key_labels[$graph_key_index];
	}

	if ($graph_key ne @graph_keys[$#graph_keys]) {
	    print GNUPLOT_COMMANDS "\t\"$data_file\" using 1:$column_index title '$graph_key' with linespoints lt $line_type pt 4, \\\n";
	} else {
	    print GNUPLOT_COMMANDS "\t\"$data_file\" using 1:$column_index title '$graph_key' with linespoints lt $line_type pt 4\n";
	}
        $graph_key_index++;
    }

    close(GNUPLOT_COMMANDS);
    system("module load gnuplot");
    my $succeed_gnuplot = system("gnuplot $gpl_file");
    if ($succeed_gnuplot == -1) {
	print "[failed to load gnuplot module]\n";
	$fatal_errors++;
    }

    #system("rm $gpl_file");
    if ($fatal_errors == 0) {
        print "[No fatal errors, success loading gnuplot]\n";
	#system("rm $errors_file");
    }
}
